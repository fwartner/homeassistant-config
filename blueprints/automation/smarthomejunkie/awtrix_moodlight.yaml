##########
# This Blueprint is created by Smart Home Junkie
# (c) copyright 2023 by Smart Home Junkie. You may not copy, reproduce, distribute, transmit, modify, create derivative works,
# or in any other way exploit any part of copyrighted material without the prior written permission from Smart Home Junkie
##########

blueprint:
  name: Awtrix Moodlight
  description: Turn your clock into a moodlight
  domain: automation
  author: Smart Home Junkie
  input:
    awtrix_displays:
      name: Awtrix Displays
      description: Select the target Awtrix displays.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    toggle_helper:
      name: Toggle Helper
      description: Select the Toggle Helper that will toggle the moodlight on or off.
      selector:
        entity:
          domain: input_boolean
    brightness:
      name: Brightness
      description: WARNING This function causes much higher current draw and heat, because every pixel is lit. Keep the brightness value low (between 0 and 200). The clock may turn off if the brightness level is too high when running on battery power!
      selector:
        number:
          min: 0
          max: 200
      default: 100
    moodlight_color:
      name: Color
      description: Select the Moodlight color
      selector:
        color_rgb:
      default: [255, 255, 255]
    moodlight_kelvin:
      name: Kelvin value
      description: Enter a Kelvin value. Typically choose a value between 1000 and 10000. A value of 0 disables Kelvin. Kelvin overwrites the color.
      selector:
        number:
          min: 0
          max: 10000
      default: 0

mode: queued

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"

variables:
  device_ids: !input awtrix_displays
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {% endmacro %}

    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable') | list }}
  my_toggle_helper: !input toggle_helper
  brightness: !input brightness
  moodlight_color: !input moodlight_color
  moodlight_kelvin: !input moodlight_kelvin

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/moodlight"
                    payload: |-
                      {   
                        "brightness": {{ brightness }},
                        {% if moodlight_kelvin == 0 %}
                          "color": {{ moodlight_color }}
                        {% else %}
                          "kelvin": {{ moodlight_kelvin }}  
                        {% endif %}
                      }
      - conditions:
          - condition: trigger
            id: "Off"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/moodlight"
