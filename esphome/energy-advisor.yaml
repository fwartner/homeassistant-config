substitutions:
  devicename: energy-advisor
  friendname: energy-advisor
  location: master
  board: esp32-c3-devkitm-1
  repin: GPIO1
  dcpin: GPIO2
  bkpin: GPIO3
  clpin: GPIO6
  mopin: GPIO7
  cspin: GPIO10

esphome:
  name: $devicename
  friendly_name: $friendname

esp32:
  board: $board
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Energy-Advisor Fallback Hotspot"
    password: "fXJIX5Jl0x3Y"

external_components:
  - source: github://bearpawmaxim/esphome@pr3625fix
    components: [ gc9a01 ]
  - source: github://GadgetFactory/CST816S_touchscreen@1.0.0

spi:
  mosi_pin: $mopin
  clk_pin: $clpin

output:
  - platform: ledc
    pin: $bkpin
    id: gpio_3_backlight_pwm

light:
  - platform: monochromatic
    output: gpio_3_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
    
display:
  - platform: gc9a01
    id: watchface
    reset_pin: $repin
    cs_pin: $cspin
    dc_pin: $dcpin
    rotation: 90 
    lambda: |-
      auto red = Color(255, 0, 0);
      auto green = Color(0, 255, 0);
      auto yellow = Color(255, 255, 0);
      auto white = Color(255, 255, 255);
      auto black = Color(0, 0, 0);
      auto left_center = 30;
      auto top_center = 120;
      it.strftime(85, 20, id(roboto_extra_large), "%H:%M", id(hass_time).now());
      if((id(energy_current_hour).state > 1 || id(solar_production).state > 1000)) {
        it.filled_circle(left_center + 45, top_center, 20, green);
        it.image(left_center + 35, top_center - 12, id(lightning), green, black);
        it.printf(left_center + 35 + 45, top_center+12, id(roboto_medium), TextAlign::BASELINE_LEFT, "Jetzt!");
      } else if (id(energy_next_hour).state > 1) {
        it.filled_circle(left_center, top_center, 20, yellow);
        it.image(left_center - 10, top_center - 12, id(lightning), yellow, black);
        it.printf(left_center + 35, top_center+12, id(roboto_medium), TextAlign::BASELINE_LEFT, "Guck später");
      } else {
        if(id(energy_production_today_remaining).state < 5) {
          it.filled_circle(left_center + 10, top_center, 20, red);
          it.image(left_center, top_center - 12, id(lightning), red, white);
          it.printf(left_center + 45, top_center+12, id(roboto_medium), TextAlign::BASELINE_LEFT, "Morgen");
        } else {
          it.filled_circle(left_center, top_center, 20, red);
          it.image(left_center - 10, top_center - 12, id(lightning), red, white);
          it.printf(left_center + 35, top_center+12, id(roboto_medium), TextAlign::BASELINE_LEFT, "Im Laufe des Tages");
        }
      }
      switch (id(page)){
        case 1:
          it.image(110, 160, id(sun), black, white);
          it.printf(120, 200, id(roboto_small), TextAlign::CENTER, "Aktuell: %.0f W", id(solar_production).state);
          break;
        case 2: 
          it.image(110, 160, id(sun), black, white);
          it.printf(120, 200, id(roboto_small), TextAlign::CENTER, "Nächste Stunde: %.0f kWh", id(energy_next_hour).state);
          break;
        case 3: 
          it.image(110, 160, id(sun), black, white);
          it.printf(120, 200, id(roboto_small), TextAlign::CENTER, "Restlicher Tag: %.0f kWh", id(energy_production_today_remaining).state);
          break;
        case 4: 
          it.image(110, 160, id(sun), black, white);
          it.printf(120, 200, id(roboto_small), TextAlign::CENTER, "Ins Netz: %.0f W", id(power_to_grid).state);
          break;
      }

font:
  - file: "gfonts://Roboto"
    id: roboto_small
    size: 10
    glyphs: "!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzä "
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 18
    glyphs: "!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzä "
  - file: "gfonts://Roboto"
    id: roboto_large
    size: 30
    glyphs: "!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzä "
  - file: "gfonts://Roboto"
    id: roboto_extra_large
    size: 40
    glyphs: "!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzä "

image:
  - file: "icons/sun.png"
    id: sun
  - file: "icons/battery-low.png"
    id: battery
  - file: "icons/battery-full.png"
    id: lightning

time:
  - platform: homeassistant
    timezone: "Europe/Berlin"
    id: hass_time

sensor:
  - platform: homeassistant
    name: "Energy next hour"
    id: energy_next_hour
    entity_id: sensor.energy_next_hour
    force_update: true
  - platform: homeassistant
    name: "Energy current hour"
    id: energy_current_hour
    entity_id: sensor.energy_current_hour
    force_update: true 
  - platform: homeassistant
    name: "Energy production today remaining"
    id: energy_production_today_remaining
    entity_id: sensor.energy_production_today_remaining
    force_update: true
  - platform: homeassistant
    name: "Solar production"
    id: solar_production
    entity_id: sensor.shelly_bkw_power
    force_update: true
  - platform: homeassistant
    name: "Power to grid"
    id: power_to_grid
    entity_id: sensor.energy_export_daily
    force_update: true

globals:
- id: page
  type: int
  initial_value: "1"

interval:
- interval: 15s
  then:
    - lambda: |-
        id(page) = (id(page) + 1);
        if (id(page) > 5) {
          id(page) = 1;
        }