button_card_templates:
  base:
    variables:
      state: |
        [[[ return entity === undefined || entity.state; ]]]
      entity_id: |
        [[[ return entity === undefined || entity.entity_id ]]]
      entity_picture: |
        [[[ return entity === undefined || entity.attributes.entity_picture; ]]]
    aspect-ratio: 1/1
    show_state: true
    show_icon: false
  card:
    show_state: true
    state_display: |
      [[[
        var state = entity ? entity.state : null;

        return state
          ? `${state.charAt(0).toUpperCase()}${state.slice(1)}`
          : null;
      ]]]
    variables:
      color: yellow
    tap_action:
      action: toggle
    double_tap_action:
      action: more-info
    hold_action:
      action: more-info
    styles:
      grid:
        - grid-template-columns: 38px fit-content(100%)
        - grid-template-areas: |
            "i n"
            "i s"
        - grid-template-rows: 19px 19px
        - column-gap: 8px
        - row-gap: 0px
      card:
        - background: var(--sidebar-background-color)
        - box-sizing: border-box
        - box-shadow: none
        - border-radius: 8px
        - padding: 12px
        - margin-bottom: 8px
      img_cell:
        - border-radius: 4px
        - background-color: |
            [[[
              if (entity.state !== 'off') {
                var color_set = entity.attributes.rgb_color ? entity.attributes.rgb_color : variables.color;
                var color = `rgba(var(--color-${color_set}), 0.15)`;

                if (entity.attributes.rgb_color) {
                  color = `rgba(${color_set}, 0.15)`;
                }

                return color;
              }

              return `var(--sidebar-border-color)`;
            ]]]
        - display: flex
        - align-items: center
        - justify-content: center
        - flex-shrink: 0
        - height: 38px
        - width: 38px
        - transition: background-color 350ms ease-in-out
      icon:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 24px
        - width: 24px
        - color: |
            [[[
              if (entity.state !== 'off') {
                var color_set = entity.attributes.rgb_color ? entity.attributes.rgb_color : variables.color;
                var color = `rgba(var(--color-${color_set}), 1)`;

                if (entity.attributes.rgb_color) {
                  color = `rgba(${color_set}, 1)`;
                }

                return color;
              }

              return `var(--secondary-text-color)`;
            ]]]
        - transition: color 350ms ease-in-out
      name:
        - font-weight: 600
        - font-size: 14px
        - text-align: left
      state:
        - font-weight: 600
        - font-size: 12px
        - color: var(--secondary-text-color)
        - text-align: left
        - width: 100%
  card_contact_sensor:
    template:
      - card
    state_display: |
      [[[
        return entity && entity.state === 'on'
          ? "Open"
          : "Closed"
      ]]]
  card_power_outlet:
    variables:
      power_outlet_icon: "[[[ return entity.attributes.icon ]]]"
      power_outlet_name: "[[[ return entity.attributes.friendly_name ]]]"
      power_outlet_consumption_sensor: null
    state:
      - operator: template
        value: test
    custom_fields:
      item1:
        card:
          type: custom:button-card
          custom_fields:
            item1:
              card:
                type: custom:button-card
                entity: "[[[ return entity.entity_id ]]]"
                icon: "[[[ return variables.power_outlet_icon ]]]"
            item2:
              card:
                type: custom:button-card
                entity: "[[[ return entity.entity_id ]]]"
                name: "[[[ return variables.power_outlet_name ]]]"
                label: |-
                  [[[
                    if (entity.state === 'on' && variables.power_outlet_consumption_sensor !== null) {
                      return `${entity.state} â€¢ ${variables.power_outlet_consumption_sensor}`;
                    } else {
                      return entity.state;
                    }
                  ]]]
  clock:
    show_state: true
    show_icon: false
    show_name: false
    tap_action:
      action: none
    styles:
      card:
        - background: transparent
        - box-shadow: none
        - font-family: ui-rounded, system-ui, "SF Pro Text", Robot, sans-serif
        - font-size: 64px
        - font-weight: 500
        - padding: 0
        - line-height: 1
  date:
    show_icon: false
    tap_action:
      action: none
    styles:
      card:
        - background: transparent
        - box-shadow: none
        - font-family: ui-rounded, system-ui, "SF Pro Text", Robot, sans-serif
        - font-size: 20px
        - font-weight: 500
        - padding: 0
    triggers_update: all
    name: |
      [[[
        const event = new Date();
        const options = {weekday: 'long', day: 'numeric', month: 'long',  };
        let formatted_date = event.toLocaleDateString("en", options);
        return formatted_date;
      ]]]
  footer:
    show_state: false
    show_icon: false
    tap_action:
      action: none
    name: |
      [[[
        if (!entity) {
          let attr = [];

          for (let [k, value] of Object.entries(entity.attributes)) {
            value !== false && (attr += `<p>${value}</p>`);
          }

          return attr;
        }
      ]]]
    styles:
      card:
        - border-radius: 0
        - height: 64px
        - min-height: 64px
        - margin: 0
        - flex-direction: row
        - padding: 0
        - border-right: none
  icon_lightning:
    custom_fields:
      icon: |
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M8.28415 3.77629C8.38199 3.46319 8.67197 3.25 9.00001 3.25H13C13.2275 3.25 13.4427 3.35325 13.585 3.5307C13.7274 3.70816 13.7815 3.94063 13.7321 4.1627L12.935 7.75H17.5C17.7686 7.75 18.0166 7.89358 18.1504 8.12645C18.2841 8.35932 18.2832 8.64594 18.1478 8.8779L11.1478 20.8779C10.973 21.1777 10.6153 21.3183 10.2831 21.2179C9.95088 21.1176 9.73092 20.8024 9.7513 20.456L10.2046 12.75H6.50001C6.26142 12.75 6.03706 12.6365 5.89574 12.4443C5.75441 12.252 5.71298 12.004 5.78415 11.7763L8.28415 3.77629ZM9.5514 4.75L7.52015 11.25H11C11.2066 11.25 11.404 11.3352 11.5457 11.4855C11.6874 11.6358 11.7608 11.8378 11.7487 12.044L11.4329 17.4122L16.1942 9.25H12C11.7725 9.25 11.5573 9.14675 11.415 8.9693C11.2726 8.79184 11.2185 8.55937 11.2679 8.3373L12.065 4.75H9.5514Z" fill="currentColor"/>
        </svg>
  icon_trash_can:
    custom_fields:
      icon: |
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M10.5 4.25C10.3619 4.25 10.25 4.36193 10.25 4.5V4.75H13.75V4.5C13.75 4.36193 13.6381 4.25 13.5 4.25H10.5ZM6.5 4.75H8.75V4.5C8.75 3.5335 9.5335 2.75 10.5 2.75H13.5C14.4665 2.75 15.25 3.5335 15.25 4.5V4.75H17.5C17.9142 4.75 18.25 5.08579 18.25 5.5C18.25 5.91421 17.9142 6.25 17.5 6.25H14.5H9.5H6.5C6.08579 6.25 5.75 5.91421 5.75 5.5C5.75 5.08579 6.08579 4.75 6.5 4.75ZM8.33765 8.52076C8.32551 8.37501 8.44053 8.25 8.58679 8.25H15.4132C15.5595 8.25 15.6745 8.37501 15.6623 8.52076L14.829 18.5208C14.8182 18.6503 14.7099 18.75 14.5799 18.75H9.42012C9.2901 18.75 9.18179 18.6503 9.17099 18.5208L8.33765 8.52076ZM8.58679 6.75C7.56297 6.75 6.75781 7.62505 6.84284 8.64533L7.67617 18.6453C7.75175 19.5523 8.50997 20.25 9.42012 20.25H14.5799C15.49 20.25 16.2482 19.5523 16.3238 18.6453L17.1571 8.64533C17.2422 7.62505 16.437 6.75 15.4132 6.75H8.58679ZM11.25 10C11.25 9.58579 10.9142 9.25 10.5 9.25C10.0858 9.25 9.75 9.58579 9.75 10V17C9.75 17.4142 10.0858 17.75 10.5 17.75C10.9142 17.75 11.25 17.4142 11.25 17V10ZM13.5 9.25C13.9142 9.25 14.25 9.58579 14.25 10V17C14.25 17.4142 13.9142 17.75 13.5 17.75C13.0858 17.75 12.75 17.4142 12.75 17V10C12.75 9.58579 13.0858 9.25 13.5 9.25Z" fill="currentColor"/>
        </svg>
  icon_homepod_mini:
    custom_fields:
      icon: |
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M12.0041 19.5C12.7408 19.5 13.3801 19.4722 13.9218 19.4166C14.4689 19.3665 14.9457 19.2831 15.352 19.1663C15.7637 19.0495 16.1293 18.8938 16.449 18.6991C16.774 18.51 17.0828 18.2736 17.3753 17.99C18.2042 17.2113 18.8488 16.2853 19.3093 15.2119C19.7698 14.1329 20 12.9983 20 11.8081C20 10.8459 19.8456 9.92269 19.5368 9.03838C19.2335 8.1485 18.7892 7.36986 18.2042 6.70245C18.0471 6.4911 17.8466 6.36874 17.6028 6.33537C17.3591 6.302 17.1234 6.35762 16.8959 6.50222C16.56 6.7525 16.1754 6.97219 15.742 7.16129C15.3086 7.35039 14.7886 7.49778 14.1818 7.60345C13.5805 7.70912 12.8546 7.76196 12.0041 7.76196C11.1481 7.76196 10.4168 7.70912 9.81006 7.60345C9.20874 7.49778 8.69138 7.35039 8.258 7.16129C7.82461 6.97219 7.44269 6.7525 7.11224 6.50222C6.88471 6.35762 6.64635 6.302 6.39716 6.33537C6.15338 6.36874 5.95294 6.4911 5.79584 6.70245C5.21077 7.36986 4.76384 8.1485 4.45505 9.03838C4.15168 9.92269 4 10.8459 4 11.8081C4 12.9983 4.23024 14.1329 4.69071 15.2119C5.15118 16.2853 5.79584 17.2113 6.62468 17.99C6.91722 18.2736 7.226 18.51 7.55104 18.6991C7.87608 18.8938 8.24175 19.0495 8.64804 19.1663C9.05434 19.2831 9.52836 19.3665 10.0701 19.4166C10.6172 19.4722 11.2619 19.5 12.0041 19.5ZM12.0041 18.1568C11.1427 18.1568 10.4358 18.1207 9.88319 18.0484C9.33604 17.9816 8.88099 17.8648 8.51803 17.698C8.15507 17.5311 7.8192 17.3003 7.51041 17.0056C6.81158 16.3437 6.26985 15.5623 5.88522 14.6613C5.50059 13.7603 5.30828 12.8092 5.30828 11.8081C5.30828 11.2798 5.36516 10.7625 5.47892 10.2564C5.59269 9.75028 5.76333 9.26363 5.99086 8.79644C6.2238 8.32369 6.51634 7.88432 6.86846 7.47831L6.27527 7.63682C6.93076 8.15406 7.75419 8.52948 8.74556 8.76307C9.74234 8.9911 10.8285 9.10512 12.0041 9.10512C13.1742 9.10512 14.255 8.9911 15.2463 8.76307C16.2431 8.52948 17.0692 8.15406 17.7247 7.63682L17.1315 7.47831C17.4837 7.88432 17.7735 8.32369 18.001 8.79644C18.234 9.26363 18.4073 9.75028 18.5211 10.2564C18.6348 10.7625 18.6917 11.2798 18.6917 11.8081C18.6917 12.8092 18.4994 13.7603 18.1148 14.6613C17.7356 15.5623 17.1938 16.3437 16.4896 17.0056C16.1808 17.3003 15.8449 17.5311 15.482 17.698C15.119 17.8648 14.6612 17.9816 14.1087 18.0484C13.5615 18.1207 12.86 18.1568 12.0041 18.1568ZM12.0041 6.62736C12.7571 6.62736 13.4207 6.58009 13.9949 6.48554C14.5746 6.39099 15.0269 6.26307 15.352 6.10178C15.677 5.94049 15.8395 5.75973 15.8395 5.55951C15.8395 5.35929 15.677 5.17853 15.352 5.01724C15.0269 4.85595 14.5746 4.73081 13.9949 4.64182C13.4207 4.54727 12.7571 4.5 12.0041 4.5C11.2456 4.5 10.5766 4.54727 9.99695 4.64182C9.42272 4.73081 8.97308 4.85595 8.64804 5.01724C8.32301 5.17853 8.16049 5.35929 8.16049 5.55951C8.16049 5.75973 8.32301 5.94049 8.64804 6.10178C8.97308 6.26307 9.42272 6.39099 9.99695 6.48554C10.5766 6.58009 11.2456 6.62736 12.0041 6.62736Z" fill="currentColor"/>
        </svg>
  icon_media_play_pause:
    custom_fields:
      icon: |
        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M7.5 5.75C7.08579 5.75 6.75 6.08579 6.75 6.5V17.5C6.75 17.9142 7.08579 18.25 7.5 18.25H10.5C10.9142 18.25 11.25 17.9142 11.25 17.5V6.5C11.25 6.08579 10.9142 5.75 10.5 5.75H7.5ZM8.25 16.75V7.25H9.75V16.75H8.25ZM13.5 5.75C13.0858 5.75 12.75 6.08579 12.75 6.5V17.5C12.75 17.9142 13.0858 18.25 13.5 18.25H16.5C16.9142 18.25 17.25 17.9142 17.25 17.5V6.5C17.25 6.08579 16.9142 5.75 16.5 5.75H13.5ZM14.25 16.75V7.25H15.75V16.75H14.25Z" fill="currentColor"/>
        </svg>
  card_light:
    show_icon: false
    show_name: false
    show_state: false
    variables:
      name: "[[[ return entity && entity.attributes.friendly_name; ]]]"
      icon: "[[[ return entity && entity.attributes.icon; ]]]"
      color: yellow
    tap_action:
      action: toggle
    hold_action:
      action: more-info
    state:
      - operator: template
        value: "[[[ return variables.active_state ]]]"
        styles:
          card:
            - background-color: |
                [[[
                  var color_set = entity.attributes.rgb_color ? entity.attributes.rgb_color : variables.color;
                  var color = `rgba(var(--color-${color_set}), 0.25)`;

                  if (entity.attributes.rgb_color) {
                    color = `rgba(${color_set}, 0.25)`;
                  }

                  return color;
                ]]]
    styles:
      grid:
        - grid-template-areas: |
            "item1"
        - grid-template-columns: 1fr
        - grid-template-rows: min-content
        - row-gap: 12px
      card:
        - border-radius: 8px
        - box-sizing: border-box
        - box-shadow: none
        - padding: 12px
    custom_fields:
      item1:
        card:
          type: custom:button-card
          custom_fields:
            item1:
              card:
                type: custom:button-card
                entity: "[[[ return entity.entity_id ]]]"
                icon: "[[[ return variables.icon ]]]"
                styles:
                  icon:
                    - color: |
                        [[[
                          var color_set = entity.attributes.rgb_color ? entity.attributes.rgb_color : variables.color;
                          var color = `rgba(var(--color-${color_set}), 1)`;

                          if (entity.attributes.rgb_color) {
                            color = `rgba(${color_set}, 1)`;
                          }

                          return color;
                        ]]]
                  img_cell:
                    - background-color: |
                        [[[
                          var color_set = entity.attributes.rgb_color ? entity.attributes.rgb_color : variables.color;
                          var color = `rgba(var(--color-${color_set}), 0.25)`;

                          if (entity.attributes.rgb_color) {
                            color = `rgba(${color_set}, 0.25)`;
                          }

                          return color;
                        ]]]
  base_media:
    show_icon: false
    show_name: false
    show_state: false
    variables:
      media_on: >
        [[[ return !entity || ['on', 'playing'].indexOf(entity.state) !== -1;
        ]]]
      media_off: >
        [[[ return !entity || ['off', 'standby', 'unknown', 'unavailable',
        'paused', 'idle'].indexOf(entity.state) !== -1; ]]]
      media_icon: |
        [[[ return entity && entity.attributes.media_icon; ]]]
      media_source: |
        [[[ return entity && entity.attributes.media_source; ]]]
    tap_action:
      action: call-service
      service: |
        [[[
          return variables.media_on
            ? 'media_player.media_play_pause'
            : 'media_player.toggle'
        ]]]
      service_data:
        entity_id: "[[[ return variables.entity_id; ]]]"
    double_tap_action:
      action: more-info
    hold_action:
      action: call-service
      service: media_player.turn_off
      service_data:
        entity_id: "[[[ return variables.entity_id; ]]]"
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-areas: |
            "metadata controls extracontrols"
        - grid-template-columns: repeat(3, minmax(0, 1fr))
        - grid-template-rows: auto
        - gap: 0px
        - height: 120px
        - max-height: 120px
        - padding: 0px
      card:
        - background: var(--sidebar-background-color)
        - border-top: 1px solid var(--sidebar-border-color)
        - border-radius: 0px
        - box-shadow: none
        - box-sizing: border-box
        - height: 120px
        - max-height: 120px
        - padding: 0px
    custom_fields:
      metadata:
        card:
          type: custom:button-card
          entity: "[[[ return variables.entity_picture; ]]]"
          variables:
            media_icon: "[[[ return variables.media_icon; ]]]"
            media_source: "[[[ return variables.media_source; ]]]"
            entity_picture: "[[[ return variables.entity_picture; ]]]"
          template:
            - section_media
            - metadata_media
          styles:
            grid:
              - padding: 0px
      controls:
        card:
          type: custom:button-card
          variables:
            entity_id: "[[[ return variables.entity_id ]]]"
          template:
            - section_media
            - controls_media
      extracontrols:
        card:
          type: custom:button-card
          template:
            - section_media
  section_media:
    show_name: false
    show_state: false
    show_icon: false
    styles:
      grid:
        - box-sizing: border-box
        - padding: 12px
        - overflow: hidden
      card:
        - box-sizing: border-box
        - border-radius: 0px
        - box-shadow: none
        - height: 120px
        - padding: 0px
        - overflow: hidden
  metadata_media:
    tap_action:
      action: none
    double_tap_action:
      action: none
    hold_action:
      action: none
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-areas: |
            "artwork information"
        - grid-template-columns: 96px auto
        - gap: 16px
        - padding: 12px
        - overflow: hidden
        - width: 100%
      card:
        - box-sizing: border-box
        - overflow: hidden
        - padding: 12px
      custom_fields:
        artwork:
          - box-sizing: border-box
          - overflow: hidden
        information:
          - box-sizing: border-box
          - overflow: hidden
          - width: 100%
    custom_fields:
      artwork:
        card:
          type: custom:button-card
          entity: "[[[ return entity.entity_id; ]]]"
          variables:
            media_icon: "[[[ return variables.media_icon; ]]]"
            media_source: "[[[ return variables.media_source; ]]]"
            entity_picture: "[[[ return variables.entity_picture; ]]]"
          template:
            - artwork_media
      information:
        card:
          type: custom:button-card
          entity: "[[[ return entity.entity_id; ]]]"
          variables:
            media_icon: "[[[ return variables.media_icon; ]]]"
            media_source: "[[[ return variables.media_source; ]]]"
            entity_picture: "[[[ return variables.entity_picture; ]]]"
          template:
            - information_media
  artwork_media:
    show_name: false
    show_state: false
    icon: "[[[ return variables.media_icon ]]]"
    styles:
      card:
        - aspect-ratio: 1
        - background-image: |
            [[[
              if (
                entity
                && states[variables.entity_picture].attributes.entity_picture
                && states[variables.entity_picture].attributes.entity_picture !== ''
              ) {
                let artwork = states[variables.entity_picture].attributes.entity_picture;

                if (artwork.includes('cache=https://')) {
                  artwork = artwork.split('cache=').pop();
                }

                artwork = artwork.replace('{w}x{h}{c}.{f}', '300x300bb.jpg');
                artwork = artwork.replace('{w}x{h}bb.{f}', '300x300bb.jpg');

                return `url('${artwork}')`;
              }

              return 'none';
            ]]]
        - background-size: cover
        - background-position: center
        - background-repeat: no-repeat
        - background-color: var(--primary-background-color)
        - box-sizing: border-box
        - border: 1px solid rgba(255, 255, 255, 0.5)
        - border-radius: 8px
        - box-shadow: none
        - height: 96px
        - width: 96px
      icon:
        - color: var(--secondary-text-color)
        - display: |
            [[[
              if (
                entity
                && variables.entity_picture
                && states[variables.entity_picture].attributes.entity_picture
                && states[variables.entity_picture].attributes.entity_picture !== ''
                && states[variables.entity_picture].attributes.entity_picture !== undefined
              ) {
                return 'none';
              }

              return 'initial';
            ]]]
  information_media:
    show_name: false
    show_state: false
    show_icon: false
    styles:
      grid:
        - grid-template-areas: |
            "mediatitle"
            "mediaartist"
            "mediasource"
        - grid-template-columns: 100%
        - grid-template-rows: auto
        - gap: 2px
        - overflow: hidden
        - width: 100%
      card:
        - background: transparent
        - box-sizing: border-box
        - border-radius: 0px
        - box-shadow: none
        - padding: 0px
        - overflow: hidden
    custom_fields:
      mediatitle:
        card:
          type: custom:button-card
          variables:
            field_text: "[[[ return entity.attributes.media_title; ]]]"
          template:
            - marquee_field
          styles:
            grid:
              - height: 20px
            state:
              - color: var(--primary-text-color)
              - font-size: 16px
              - font-weight: 600
      mediaartist:
        card:
          type: custom:button-card
          variables:
            field_text: |
              [[[
                if (entity.attributes.media_album) {
                  return `${entity.attributes.media_artist} â€“ ${entity.attributes.media_album}`;
                }

                return entity.attributes.media_artist;
              ]]]
          template:
            - marquee_field
      mediasource:
        card:
          type: custom:button-card
          icon: "[[[ return states[variables.media_icon].attributes.media_icon; ]]]"
          name: >-
            [[[ return states[variables.media_source].attributes.media_source;
            ]]]
          styles:
            card:
              - margin-top: 2px
            name:
              - color: var(--secondary-text-color)
              - font-size: 10px
              - font-weight: 600
              - text-transform: uppercase
          template:
            - information_item_media
  information_item_media:
    styles:
      grid:
        - box-sizing: border-box
        - display: flex
        - justify-content: flex-start
        - text-align: left
        - gap: 2px
        - width: 100%
      icon:
        - color: var(--secondary-text-color)
        - height: 24px
        - width: 24px
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - flex-shrink: 0
        - width: 32px
      state:
        - width: auto
        - white-space: nowrap
      card:
        - box-sizing: border-box
        - border-radius: 0px
        - box-shadow: none
        - padding: 0px
        - overflow: hidden
        - width: 100%
  marquee_field:
    show_name: false
    show_icon: false
    show_state: true
    variables:
      field_text: null
    state_display: |
      [[[
        if (variables.field_text && variables.field_text !== null) {
          const parentElem = this.shadowRoot;
          const fieldText = variables.field_text;

          let output = fieldText;

          function marquee() {
            const stateEl = parentElem.getElementById("state");
            const containerEl = parentElem.getElementById("container");

            if (stateEl && containerEl) {
              stateEl.innerHTML = output;

              stateEl.classList.remove("ellipsis");

              const resizeObserver = new ResizeObserver(entries => {
                const spacer = "&nbsp;".repeat(3);
                const state = entries[0];
                const container = entries[1];
                const resize = state && state.contentRect &&
                  container && container.contentRect &&
                  state.contentRect.width !== 0 &&
                  container.contentRect.width !== 0;

                if (resize && state.contentRect.width < container.contentRect.width) {
                  stateEl.classList.remove("marquee");
                } else if (resize && state.contentRect.width >= container.contentRect.width) {
                  stateEl.innerHTML = `${output} ${spacer} ${output} ${spacer}&nbsp;`;
                  stateEl.classList.add("marquee");
                }
              });

              resizeObserver.observe(stateEl);
              resizeObserver.observe(containerEl);
            }
          }

          setTimeout(marquee, 100);

          return output;
        }

        return null;
      ]]]
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-areas: |
            "s"
        - grid-template-columns: 1fr
        - position: relative
        - overflow: hidden
        - height: 16px
      card:
        - box-sizing: border-box
        - border-radius: 0px
        - box-shadow: none
        - display: block
        - padding: 0px
      state:
        - box-sizing: border-box
        - overflow: visible
        - text-overflow: clip
        - white-space: nowrap
        - display: flex
        - align-self: center
        - justify-self: flex-start
        - position: absolute
        - text-align: left
        - left: "0"
        - width: auto
        - min-width: auto
        - max-width: 1000000px
        - color: var(--secondary-text-color)
        - font-size: 14px
        - font-weight: 500
        - padding-left: 4px
    extra_styles: |
      .marquee {
        animation: marquee 20s linear infinite;
        text-overflow: clip !important;
        overflow: inital !important;
      }

      @keyframes marquee {
        from {
          transform: translateX(0%);
        }

        to {
          transform: translateX(-50%);
        }
      }
  controls_media:
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
        - gap: 16px
    custom_fields:
      previous:
        card:
          type: custom:button-card
          icon: mdi:skip-previous
          template:
            - controls_button_media
          tap_action:
            action: call-service
            service: media_player.media_previous_track
            service_data:
              entity_id: "[[[ return variables.entity_id ]]]"
      play_pause:
        card:
          type: custom:button-card
          template:
            - controls_button_media
          icon: >-
            [[[ return states[variables.entity_id].state === "playing" ?
            "mdi:pause" : "mdi:play" ]]]
          tap_action:
            action: call-service
            service: media_player.media_play_pause
            service_data:
              entity_id: "[[[ return variables.entity_id ]]]"
      next:
        card:
          type: custom:button-card
          icon: mdi:skip-next
          template:
            - controls_button_media
          tap_action:
            action: call-service
            service: media_player.media_next_track
            service_data:
              entity_id: "[[[ return variables.entity_id ]]]"
  controls_button_media:
    styles:
      grid:
        - grid-template-areas: icon
        - grid-template-columns: 48px
        - grid-template-rows: 48px
      card:
        - border-radius: 6px
        - box-shadow: none
        - box-sizing: border-box
        - padding: 0px
      icon:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 48px
        - width: 48px
  conditional_media:
    template:
      - base
      - base_media
    variables:
      media_source: "[[[ return variables.media_source ]]]"
      entity_picture: "[[[ return entity.entity_id ]]]"
      entity_id: "[[[ return entity.entity_id ]]]"
  base_media_player:
    variables:
      media_on: |
        [[[ return !entity || ['playing'].indexOf(entity.state) !== -1; ]]]
      media_off: >
        [[[ return !entity || ['off', 'idle', 'standby', 'unknown',
        'unavailable', 'paused'].indexOf(entity.state) !== -1; ]]]
  reset_media_player_style:
    styles:
      card:
        - background: transparent
        - padding: 0
        - box-shadow: none
        - border-radius: 0
  artwork_media_player:
    show_name: false
    show_state: false
    show_icon: |
      [[[
        if (entity && variables.entity_picture) {
          return false;
        } else {
          return true;
        }
      ]]]
    template:
      - base
      - reset_media_player_style
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
      card:
        - background-image: |
            [[[
              console.log(variables.entity_picture)
              console.log(entity)
              let entity_picture = entity === undefined || entity.attributes.entity_picture;

              console.log(entity_picture)
              if (entity_picture) {
                let picture = entity_picture.replace('{w}x{h}{c}.{f}', '300x300bb.jpg');

                if (entity_picture.includes('cache=https://')) {
                  picture = picture.split('cache=').pop();
                }

                console.log(picture);
                return `url('${picture}')`;
              } else {
                return 'none';
              }
            ]]]
        - background-color: var(--sidebar-border-color)
        - background-size: cover
        - background-position: center
        - background-repeat: none
        - height: 96px
        - width: 96px
        - border-radius: 8px
        - box-shadow: none
        - border: 1px solid rgba(0, 0, 0, .25)
        - box-sizing: border-box
      icon:
        - color: var(--secondary-text-color)
        - opacity: |
            [[[
              if (variables.entity_picture) {
                return '0'
              }

              return '0.5';
            ]]]
  info_media_player:
    show_name: false
    show_state: false
    show_icon: false
    triggers_update: all
    styles:
      grid:
        - display: flex
        - flex-direction: column
        - align-items: flex-start
        - gap: 2px
      card:
        - background: transparent
        - padding: 0
        - box-shadow: none
        - border-radius: 0
    custom_fields:
      media_title:
        card:
          type: custom:button-card
          template: reset_media_player_style
          show_icon: false
          show_state: false
          styles:
            name:
              - font-family: var(--primary-font-family)
              - font-size: 16px
              - font-weight: 600
              - color: var(--primary-text-color)
              - padding-left: 2px
          entity: |
            [[[ return entity.entity_id ]]]
          name: |
            [[[ return entity && entity.attributes.media_title ]]]
      media_artist:
        card:
          type: custom:button-card
          template: reset_media_player_style
          show_icon: false
          show_state: false
          styles:
            name:
              - font-family: var(--primary-font-family)
              - font-size: 14px
              - font-weight: 500
              - color: var(--secondary-text-color)
              - padding-left: 2px
          entity: |
            [[[ return entity.entity_id ]]]
          name: |
            [[[ return entity && entity.attributes.media_artist ]]]
      media_source:
        card:
          type: custom:button-card
          template: reset_media_player_style
          show_icon: true
          show_state: false
          styles:
            grid:
              - display: flex
              - gap: 6px
              - justify-content: center
              - align-items: center
            img_cell:
              - display: flex
              - align-items: center
              - justify-content: center
              - height: 24px
              - width: 24px
            icon:
              - display: flex
              - align-items: center
              - justify-content: center
              - color: var(--secondary-text-color)
              - height: 20px
              - width: 20px
            name:
              - font-family: var(--primary-font-family)
              - font-size: 10px
              - font-weight: 600
              - letter-spacing: .5px
              - line-height: 24px
              - align-self: center
              - color: var(--secondary-text-color)
              - text-transform: uppercase
            card:
              - margin-top: 4px
          entity: |
            [[[ return entity.entity_id ]]]
  metadata_media_player:
    show_name: false
    show_state: false
    show_icon: false
    triggers_update: all
    tap_action:
      action: none
    styles:
      grid:
        - display: flex
        - gap: 16px
      card:
        - background: transparent
        - padding: 0
        - box-shadow: none
        - border-radius: 0
    custom_fields:
      artwork:
        card:
          type: custom:button-card
          template: artwork_media_player
      info:
        card:
          type: custom:button-card
          template: info_media_player
          entity: |
            [[[ return entity.entity_id ]]]
  controls_button_media_player:
    triggers_update: all
    show_name: false
    show_state: false
    show_icon: true
    tap_action:
      action: toggle
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
      card:
        - background: transparent
        - box-shadow: none
        - padding: 0px
        - height: 48px
        - width: 48px
        - pointer-events: initial !important
      icon:
        - height: 32px
        - width: 32px
  controls_media_player:
    template:
      - base
      - base_media_player
      - reset_media_player_style
    show_icon: false
    show_name: false
    show_state: false
    triggers_update: all
    tap_action:
      action: call-service
      service: media_player.media_play_pause
      service_data:
        entity_id: |
          [[[ return variables.entity_id; ]]]
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
        - gap: 10px
        - padding: 10px
      card:
        - background: transparent
        - box-shadow: none
        - padding: 0px
    custom_fields:
      previous:
        card:
          type: custom:button-card
          template:
            - controls_button_media_player
          icon: mdi:skip-previous
          show_name: false
          show_state: false
          tap_action:
            action: call-service
            service: media_player.media_previous_track
            service_data:
              entity_id: |
                [[[ return entity.entity_id ]]]
      play_pause:
        card:
          type: custom:button-card
          template:
            - base
            - base_media_player
            - controls_button_media_player
          icon: |
            [[[
              return entity && variables.media_on
                ? 'mdi:pause'
                : 'mdi:play-outline'
            ]]]
          show_name: false
          show_state: false
          tap_action:
            action: call-service
            service: media_player.media_play_pause
            service_data:
              entity_id: |
                [[[ return entity.entity_id ]]]
      next:
        card:
          type: custom:button-card
          template:
            - controls_button_media_player
          icon: mdi:skip-next
          show_name: false
          show_state: false
          tap_action:
            action: call-service
            service: media_player.media_next_track
            service_data:
              entity_id: |
                [[[ return entity.entity_id ]]]
  extra_controls_media_player:
    tap_action:
      action: toggle
    template:
      - base
      - base_media_player
      - reset_media_player_style
    show_icon: false
    show_name: false
    show_state: false
    triggers_update: all
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: flex-end
        - gap: 10px
        - padding: 10px
      card:
        - background: transparent
        - box-shadow: none
        - padding: 0px
    custom_fields:
      shuffle:
        card:
          type: custom:button-card
          template:
            - controls_button_media_player
          icon: mdi:repeat
          show_name: false
          show_state: false
          tap_action:
            action: call-service
            service: media_player.repeat_set
            service_data:
              entity_id: |
                [[[ return entity.entity_id ]]]
      repeat:
        card:
          type: custom:button-card
          template:
            - base
            - base_media_player
            - controls_button_media_player
          icon: mdi:shuffle-variant
          show_name: false
          show_state: false
          tap_action:
            action: call-service
            service: media_player.shuffle_set
            service_data:
              entity_id: |
                [[[ return entity.entity_id ]]]
  conditional_media_player:
    template:
      - base
      - base_media_player
    show_name: false
    show_state: false
    show_icon: false
    triggers_update: all
    tap_action:
      action: none
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-areas: |
            "metadata controls extra_controls"
        - grid-template-columns: 1fr 1fr 1fr
        - gap: 10px
        - align-items: center
        - justify-content: center
        - max-height: 120px
        - padding: 12px
      card:
        - background: var(--sidebar-background-color)
        - border-top: 1px solid var(--sidebar-border-color)
        - border-radius: 0px
        - box-sizing: border-box
        - box-shadow: none
        - display: flex
        - align-items: center
        - justify-content: center
        - max-height: 120px
        - padding: 0px
      img_cell:
        - display: none
      icon:
        - display: none
      name:
        - display: none
      state:
        - display: none
    custom_fields:
      metadata:
        card:
          type: custom:button-card
          entity: |
            [[[ return entity.entity_id ]]]
          variables:
            entity_picture: sensor.active_media_players
          template:
            - metadata_media_player
      controls:
        card:
          type: custom:button-card
          entity: |
            [[[ return entity.entity_id ]]]
          template:
            - controls_media_player
      extra_controls:
        card:
          type: custom:button-card
          entity: |
            [[[ return entity.entity_id ]]]
          template:
            - extra_controls_media_player
  meteocard:
    show_name: true
    show_state: true
    show_icon: true
    name: |
      [[[
        if (entity) {
          return entity.attributes.event;
        }

        return 'No warnings';
      ]]]
    state_display: |
      [[[
        if (entity) {
          return entity.attributes.description;
        }

        return null;
      ]]]
    icon: |
      [[[
        if (entity) {
          const awarenessType = Number(entity.attributes.awareness_type.split(';')[0]);

          if (awarenessType === 1) {
            return 'mdi:weather-windy';
          } else if (awarenessType === 2) {
            return 'mdi:weather-snowy-heavy';
          } else if (awarenessType === 3) {
            return 'mdi:weather-lightning';
          } else if (awarenessType === 4) {
            return 'mdi:weather-fog';
          } else if (awarenessType === 5) {
            return 'mdi:thermometer';
          } else if (awarenessType === 6) {
            return 'mdi:snowflake';
          } else if (awarenessType === 7) {
            return 'mdi:tsunami';
          } else if (awarenessType === 8) {
            return 'mdi:pine-tree-fire';
          } else if (awarenessType === 9) {
            return 'mdi:image-filter-hdr';
          } else if (awarenessType === 10) {
            return 'mdi:weather-pouring';
          } else if (awarenessType === 11 || awarenessType === 12) {
            return 'mdi:home-flood';
          }

          return "mdi:alert-circle-outline";
        }

        return null;
      ]]]
    styles:
      grid:
        - grid-template-areas: |
            "i n"
            "i s"
        - grid-template-columns: 48px auto
        - grid-template-rows: auto auto
        - grid-column-gap: 0px
        - grid-row-gap: 0px
      card:
        - background-color: |
            [[[
              if (entity) {
                const severity = entity.attributes.severity.toLowerCase();

                if (severity === 'unknown' || severity === 'minor' || severity === 'moderate') {
                  return 'rgba(var(--color-yellow), 1)';
                } else if (severity === 'severe') {
                  return 'rgba(var(--color-orange), 1)';
                } else if (severity === 'high' || severity === 'extreme') {
                  return 'rgba(var(--color-red), 1)';
                }

                return 'var(--primary-background-color)';
              }

              return 'var(--primary-background-color)';
            ]]]
        - box-sizing: border-box
        - border-radius: 50px
        - color: |
            [[[
              if (entity) {
                const severity = entity.attributes.severity.toLowerCase();

                if (severity === 'unknown' || severity === 'minor' || severity === 'moderate' || severity === 'severe') {
                  return 'rgba(var(--color-black), 1)';
                } else if (severity === 'high' || severity === 'extreme') {
                  return 'rgba(var(--color-white), 1)';
                }

                return 'var(--primary-text-color)';
              }

              return 'var(--primary-text-color)';
            ]]]
        - margin-top: 12px
        - padding: 8px
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 32px
        - width: 32px
      icon:
        - height: 32px
        - width: 32px
      name:
        - font-size: 12px
        - font-weight: 600
        - text-align: left
        - width: 100%
      state:
        - font-size: 10px
        - font-weight: 400
        - text-align: left
        - width: 100%
  persons:
    styles:
      grid:
        - display: flex
        - justify-content: center
        - gap: 8px
      card:
        - background: transparent
        - border-radius: 0
        - box-shadow: none
  person:
    show_name: false
    show_state: false
    template:
      - base
    triggers_update: sensor.time
    styles:
      custom_fields:
        icon:
          - clip-path: circle()
          - pointer-events: none
          - height: 100%
          - aspect-ratio: 1
          - width: 100%
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
      card:
        - max-width: 48px
        - background: transparent
        - box-shadow: none
        - border-radius: 50%
        - padding: 0px
        - opacity: |
            [[[
              return variables.state === "home"
                ? 1
                : .5;
            ]]]
    custom_fields:
      icon: |
        [[[
          return entity && variables.entity_picture
            ? `<img src="${variables.entity_picture}" style="width:100%;height:100%" alt="${variables.state}" />`
            : null;
        ]]]
  popup_button:
    variables:
      notification: >
        [[[
          return false;
        ]]]
    styles:
      grid:
        - display: flex
        - gap: 8px
      card:
        - background: var(--sidebar-background-color)
        - box-sizing: border-box
        - box-shadow: none
        - border: 1px solid var(--sidebar-border-color)
        - border-radius: 8px
        - padding: 6px 12px
        - position: absolute
        - overflow: unset
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - width: 24px
      name:
        - color: var(--secondary-text-color)
        - font-family: var(--primary-font-family)
        - font-size: 14px
        - font-weight: 500
      icon:
        - color: var(--secondary-text-color)
        - height: 32px
        - width: 32px
      custom_fields:
        notification:
          - position: absolute
          - top: 0
          - right: 0
          - background-color: rgba(var(--color-red), 1)
          - font-size: 12px
          - font-weight: 700
          - color: white
          - border-radius: 100%
          - height: 20px
          - width: 20px
          - display: >
              [[[
                if (Number.isInteger(variables.notification)) {
                  return variables.notification > 0
                    ? 'flex'
                    : 'none';
                } else if (variables.notification) {
                  return variables.notification
                    ? 'flex'
                    : 'none';
                }
              ]]]
          - align-items: center
          - justify-content: center
          - text-align: center
          - transform: translate(10px, -10px)
          - z-index: 1
    custom_fields:
      notification: >
        [[[
          if (Number.isInteger(variables.notification)) {
            return variables.notification;
          } else if (variables.notification) {
            return `<span styles="font-weight: 900;">!</span>`;
          }
        ]]]

  section_title:
    show_icon: false
    show_state: false
    variables:
      temperature: null
      humidity: null
    styles:
      grid:
        - display: flex
        - gap: 10px
        - justify-content: space-between
        - align-items: center
      card:
        - background: transparent
        - border-radius: 0px
        - box-shadow: none
        - box-sizing: border-box
        - padding: 0px 12px
        - margin-bottom: 16px
      name:
        - font-weight: 500
        - font-size: 22px
    tap_action:
      action: none
    custom_fields:
      info:
        card:
          type: "custom:button-card"
          show_icon: false
          show_name: true
          show_state: false
          icon: mdi:temperature
          tap_action:
            action: none
          name: >
            [[[
              if (variables.temperature && variables.humidity) {
                return `${Number(variables.temperature).toFixed(1)}Â°C / ${Number(variables.humidity).toFixed(2)}%`;
              } else if (variables.temperature) {
                return `${Number(variables.temperature).toFixed(1)}Â°C`;
              } else if (variables.humidity) {
                return `${Number(variables.humidity).toFixed(2)}%`;
              } else {
                return null;
              }
            ]]]
          styles:
            card:
              - background: transparent
              - border-radius: 0px
              - box-shadow: none
              - box-sizing: border-box
              - padding: 0px
            name:
              - color: var(--secondary-text-color)

  settings:
    variables:
      entity_tablet: switch.galaxy_tab_a_screensaver
      entity_browser_mod: media_player.tablet
      translate_unknown: Unknown
      translate_idle: Inactive
      translate_home: Home
      translate_not_home: Away
      translate_available: Available
      translate_no_updates: No updates
      translate_update_available: update available
      translate_updates_available: updates available

  sidebar:
    show_state: false
    show_icon: false
    show_name: false
    styles:
      grid:
        - grid-template-areas: |
            "clock"
            "date"
            "warnings"
            "."
            "people"
            "tesla"
            "utilities"
        - grid-template-columns: 1fr
        - grid-template-rows: min-content min-content min-content auto min-content min-content min-content
        - gap: 8px
      card:
        - background: "var(--sidebar-background-color)"
        - border-radius: 0
        - border-right: "1px solid var(--sidebar-border-color)"
        - box-shadow: none
        - color: "#F0F0F0"
        - font-family: ui-rounded, system-ui, "SF Pro Text", Roboto, sans-serif
        - height: "calc(100vh - 64px)"
        - padding: 32px 16px 16px

    custom_fields:
      clock:
        card:
          type: "custom:button-card"
          template: clock
          entity: sensor.time
          styles:
            card:
              - box-sizing: border-box
              - border-radius: 0px
      date:
        card:
          type: "custom:button-card"
          template: date
          entity: sensor.date
          styles:
            card:
              - box-sizing: border-box
              - border-radius: 0px
      warnings:
        card:
          type: "conditional"
          conditions:
            - entity: binary_sensor.meteoalarm
              state: "on"
          card:
            type: "custom:button-card"
            entity: binary_sensor.meteoalarm
            template:
              - meteocard
      tesla:
        card:
          type: "custom:button-card"
          template:
            - tesla_card
          entity: device_tracker.starship
      people:
        card:
          type: "custom:button-card"
          template: persons
          custom_fields:
            person1:
              card:
                type: "custom:button-card"
                template:
                  - person
                entity: person.vigo
            person2:
              card:
                type: "custom:button-card"
                template:
                  - person
                entity: person.natalja
            person3:
              card:
                type: "custom:button-card"
                template:
                  - person
                entity: person.jens
      utilities:
        card:
          type: "custom:button-card"
          template: utilities

  tesla_card:
    show_icon: false
    show_name: false
    show_state: false
    variables:
      battery_sensor: sensor.starship_battery
      range_sensor: sensor.starship_range
      info1_sensor: binary_sensor.starship_locked
      info2_sensor: binary_sensor.starship_charger_2
      info3_sensor: binary_sensor.starship_climate
      info4_sensor: binary_sensor.starship_windows
    styles:
      grid:
        - grid-template-columns: fit-content auto auto fit-content
        - grid-template-rows: 32px 152px auto
        - grid-template-areas: |
            "battery  .       .       range"
            "image    image   image   image"
            "info     info    info    info"
      card:
        - background: var(--primary-background-color)
        - border-radius: 12px
        - box-shadow: none
        - box-sizing: border-box
        - padding: 8px 12px
    custom_fields:
      battery:
        card:
          type: "custom:button-card"
          entity: "[[[ return variables.battery_sensor; ]]]"
          icon: >
            [[[
              if (states[variables.info2_sensor].state === "on") {
                return "mdi:battery-charging";
              } else {
                return states[variables.info2_sensor].attributes.icon;
              }
            ]]]
          template:
            - tesla_sensor_info
      range:
        card:
          type: "custom:button-card"
          entity: "[[[ return variables.range_sensor; ]]]"
          template:
            - tesla_sensor_info
          styles:
            grid:
              - display: flex
              - flex-direction: row-reverse
      image:
        card:
          type: "custom:button-card"
          tap_action:
            action: none
          styles:
            card:
              - background-color: transparent
              - background-image: url('/local/images/tesla-model-3-optimized.png')
              - background-size: cover
              - background-position: center
              - background-repeat: no-repeat
              - border-radius: 0px
              - box-shadow: none
              - height: 120px
      info:
        card:
          type: "custom:button-card"
          show_icon: false
          show_name: false
          show_state: false
          styles:
            grid:
              - grid-template-areas: |
                  "info1 info2 info3 info4"
              - grid-template-columns: 1fr 1fr 1fr 1fr
              - grid-template-rows: 1fr
              - column-gap: 6px
            card:
              - background: transparent
              - box-sizing: border-box
              - box-shadow: none
              - border-radius: 0px
              - padding: 0px
          custom_fields:
            info1:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.info1_sensor; ]]]"
                template:
                  - tesla_info
                styles:
                  card:
                    - grid-area: "info1"
            info2:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.info2_sensor; ]]]"
                template:
                  - tesla_info
                styles:
                  card:
                    - grid-area: "info2"
            info3:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.info3_sensor; ]]]"
                template:
                  - tesla_info
                styles:
                  card:
                    - grid-area: "info3"
            info4:
              card:
                type: "custom:button-card"
                entity: "[[[ return variables.info4_sensor; ]]]"
                template:
                  - tesla_info
                styles:
                  card:
                    - grid-area: "info4"

  tesla_info:
    show_icon: true
    show_name: false
    show_state: false
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
      card:
        - background: transparent
        - border-radius: 6px
        - box-shadow: none
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 32px
      icon:
        - color: >
            [[[
              if (entity && entity.state === "on") {
                return "var(--primary-text-color)";
              } else {
                return "var(--secondary-text-color)";
              }
            ]]]
        - height: 24px
        - width: 24px

  tesla_sensor_info:
    show_icon: true
    show_name: false
    show_state: true
    styles:
      grid:
        - display: flex
        - gap: 6px
      card:
        - background: transparent
        - box-sizing: border-box
        - box-shadow: none
        - border-radius: 4px
        - padding: 0px
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 24px
        - width: 24px
      icon:
        - color: var(--secondary-text-color)
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 24px
        - width: 24px
      state:
        - font-size: 14px
        - font-weight: 600

  top_nav:
    show_icon: none
    show_name: none
    show_state: none
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-areas: |
            "weather doors home_hub"
        - grid-template-columns: 1fr 1fr 1fr
        - align-items: center
        - height: 48px
        - padding: 8px 16px
      card:
        - background: transparent
        - border-radius: 0px
        - box-shadow: none
        - box-sizing: border-box
        - padding: 0px
    custom_fields:
      weather:
        card:
          type: "custom:button-card"
          styles:
            card:
              - align-self: flex-start
          template:
            - weather
          entity: weather.forecast
      doors:
        card:
          type: "custom:button-card"
          template:
            - doors
          entity: binary_sensor.hallway_front_door
          state:
      home_hub:
        card:
          type: "custom:button-card"
          styles:
            card:
              - align-self: flex-end
          template:
            - home_hub
          entity: sensor.home_hub_battery

  weather:
    show_icon: true
    show_name: false
    show_state: true
    icon: >
      [[[
        if (entity) {
          if (entity.state === 'partlycloudy') {
            return 'mdi:weather-partly-cloudy';
          } else if (entity.state === 'clear-night') {
            return 'mdi:weather-night';
          } else if (entity.state === 'cloudy') {
            return 'mdi:weather-cloudy';
          } else if (entity.state === 'exceptional') {
            return 'mdi:alert-circle-outline';
          } else if (entity.state === 'fog') {
            return 'mdi:weather-fog';
          } else if (entity.state === 'hail') {
            return 'mdi:weather-hail';
          } else if (entity.state === 'lightning') {
            return 'mdi:weather-lightning';
          } else if (entity.state === 'lightning-rainy') {
            return 'mdi:weather-lightning-rainy';
          } else if (entity.state === 'pouring') {
            return 'mdi:weather-pouring';
          } else if (entity.state === 'rainy') {
            return 'mdi:weather-rainy';
          } else if (entity.state === 'snowy') {
            return 'mdi:weather-snowy';
          } else if (entity.state === 'snowy-rainy') {
            return 'mdi:weather-snowy-rainy';
          } else if (entity.state === 'sunny') {
            return 'mdi:weather-sunny';
          } else if (entity.state === 'windy') {
            return 'mdi:weather-windy';
          } else if (entity.state === 'windy-variant') {
            return 'mdi:weather-windy-variant';
          } else {
            return 'mdi:cloud';
          }
        }
      ]]]
    state_display: >
      [[[
        if (entity) {
          return `${entity.attributes.temperature} ${entity.attributes.temperature_unit}`;
        }

        return null;
      ]]]
    styles:
      grid:
        - display: flex
        - gap: 6px
      card:
        - background: transparent
        - box-shadow: none
        - border-radius: 0px
        - padding: 0px
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - width: 32px
      icon:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 32px
        - width: 32px
      state:
        - font-size: 16px
        - font-weight: 600

  doors:
    show_icon: true
    show_name: false
    show_state: false
    styles:
      grid:
        - display: flex
        - align-items: center
        - justify-content: center
      card:
        - background: transparent
        - box-shadow: none
        - border-radius: 0px
        - padding: 0px
      icon:
        - color: var(--primary-text-color)
        - width: 32px

  home_hub:
    show_icon: true
    show_name: false
    show_state: true
    styles:
      grid:
        - display: flex
        - flex-direction: row-reverse
        - gap: 6px
        - justify-content: flex-start
      card:
        - background: transparent
        - box-shadow: none
        - border-radius: 0px
        - padding: 0px
      img_cell:
        - display: flex
        - align-items: center
        - justify-content: center
        - width: 32px
      name:
        - display: none
      icon:
        - display: flex
        - align-items: center
        - justify-content: center
        - height: 32px
        - width: 32px
      state:
        - font-size: 16px
        - font-weight: 600

  base_updates:
    show_state: true
    show_icon: false
    show_name: false
    styles:
      state:
        - text-align: left
        - justify-self: left
        - white-space: normal
      card:
        - cursor: default
    tap_action:
      href:
    extra_styles: |
      ha-icon {
        width: 1.4em;
        vertical-align: 12%;
        opacity: 0.5;
        padding-right: 2px;
      }
      .title {
        font-size: 1.3em;
        font-weight: 500;
      }
      .subtitle {
        font-size: 0.95em;
        line-height: 0.7em;
        padding-left: 3px;
        padding-bottom: 10px;
        font-weight: 500;
        color: #828383;
      }
      a {
        color: var(--primary-color);
      }
      ul {
        margin-top: -0.6em;
        font-size: 0.88em;
        letter-spacing: 0.5px;
        line-height: 1.6em;
      }
      code {
        background-color: var(--secondary-background-color);
      }

  updates_hass:
    template:
      - base_updates
      - settings
    state_display: |
      [[[
        if (entity) {
          let available = states[variables.available].attributes.home_assistant;

          let links = new RegExp('<a href="([^"]+)"', "g"),
              installed = entity.state,
              hass_version_latest = states[variables.latest],
              hass_version_latest_beta = states[variables.latest_beta],
              hass_release_notes = states[variables.release_notes],
              hass_release_notes_beta = states[variables.release_notes_beta];

          let latest = installed.includes('b')
              ? hass_version_latest_beta.state
              : hass_version_latest.state;

          let release_notes = installed.includes('b')
              ? marked.parse(hass_release_notes.attributes.body)
              : marked.parse(hass_release_notes_beta.attributes.body);

          let subtitle = available === 0
              ? `${variables.translate_no_updates} <b>&larr;</b> ${installed}`
              : `${installed} <b>&rarr;</b> ${latest} ${variables.translate_available} ${String.fromCodePoint("0x1f389")}`;

          let output = available === 0
              ? '<ul></ul>'
              : release_notes.replace(links, '<a href="#" onclick="window.open(\'$1\')"');

          return `
            <ha-icon icon="mdi:home-assistant"></ha-icon> <span class="title">Home Assistant</span><br>
            <p class="subtitle">${subtitle}</p>
            ${output}
          `;
        }
      ]]]

  utilities:
    show_name: false
    show_icon: false
    show_state: false

    styles:
      grid:
        - grid-template-areas: |
            "electricity waste"
        - grid-template-columns: 1fr 1fr
        - grid-gap: 1px
      card:
        - border-radius: 12px
        - box-shadow: none
        - font-family: ui-rounded, system-ui, "SF Pro Text", Roboto, sans-serif
        - gap: 1px
        - display: flex
        - padding: 0
        - overflow: hidden

    custom_fields:
      electricity:
        card:
          type: "custom:button-card"
          show_icon: false
          entity: sensor.nordpool_kwh_price
          template:
            - utility
            - icon_lightning
      waste:
        card:
          type: "custom:button-card"
          show_icon: false
          template:
            - utility
            - icon_trash_can
          entity: sensor.template_waste_collection

  utility:
    show_state: true
    state_display: |
      [[[
        if (entity) {
          var value = states[entity.entity_id];

          if (
            value
            && value.attributes
            && value.attributes.unit_of_measurement
            && value.attributes.unit_of_measurement === "EUR/kWh")
          {
            var formattedState = Number(value.state);
            return `${formattedState.toFixed(2)} â‚¬/kWh`;
          }

          return `${value.state}`;
        }

        return null;
      ]]]
    styles:
      grid:
        - box-sizing: border-box
        - grid-template-columns: 32px auto
        - grid-template-areas: |
            "icon value"
            "icon name"
        - grid-template-rows: 19px 13px
        - column-gap: 4px
        - row-gap: 0px
        - padding-right: 8px
        - padding-left: 8px
        - padding-top: 8px
        - padding-bottom: 8px

      img_cell:
        - display: none
        - box-sizing: border-box

      custom_fields:
        icon:
          - box-sizing: border-box
          - color: "var(--secondary-text-color)"
          - height: 32px

      state:
        - box-sizing: border-box
        - display: flex
        - align-items: end;
        - font-family: ui-rounded, system-ui, "SF Pro Text", Roboto, sans-serif
        - color: "var(--primary-text-color)"
        - grid-area: value
        - font-size: 12px
        - line-height: 15px
        - font-weight: 600
        - text-align: left
        - width: 100%
        - align-self: end

      name:
        - box-sizing: border-box
        - font-family: ui-rounded, system-ui, "SF Pro Text", Roboto, sans-serif
        - grid-area: name
        - color: "var(--secondary-text-color)"
        - font-size: 8px
        - font-weight: 700
        - line-height: 11px
        - text-align: left
        - width: 100%
        - align-self: start

      card:
        - background: "var(--primary-background-color)"
        - box-sizing: border-box
        - display: flex
        - border-radius: 0px
        - box-shadow: none
        - padding: 0 0 0 0
        - align-items: center
        - justify-content: center

views:
  - type: custom:grid-layout
    title: Overview
    path: overview
    icon: mdi:home
    layout:
      margin: 0
      padding: 0
      grid-gap: 0px
      grid-template-columns: 1fr
      grid-template-rows: repeat(6, min-content)
      grid-template-areas: |
        "top_nav"
        "content"
        "otherActions"
        "footer"
        "mediaPlayer"
        "sidebar"
      mediaquery:
        "(min-width: 880px)":
          grid-template-columns: 285px auto
          grid-template-rows: 48px fit-content(100%) 70px 120px 64px
          grid-template-areas: |
            "sidebar    top_nav"
            "sidebar    content"
            "sidebar    otherActions"
            "sidebar    mediaPlayer"
            "footer     footer"
    cards:
      - type: "horizontal-stack"
        view_layout:
          grid-area: top_nav
        cards:
          - type: "custom:button-card"
            template: top_nav

      - type: "vertical-stack"
        view_layout:
          grid-area: sidebar
        cards:
          - type: "custom:button-card"
            template: sidebar

      - type: "custom:layout-card"
        layout_type: "custom:grid-layout"
        layout:
          grid-template-columns: 1fr
          grid-template-rows: repeat(6, auto)
          grid-template-areas: |
            "living-room"
            "bedroom"
            "kids-room"
            "kitchen"
            "hallway"
            "bathroom"
          # margin: 0
          grid-gap: 2px
          height: 100%
          mediaquery:
            "(min-width: 880px)":
              grid-template-columns: 1fr 1fr 1fr
              grid-template-rows: min-content min-content
              grid-template-areas: |
                "living-room bedroom kids-room"
                "kitchen hallway bathroom"

        view_layout:
          grid-area: content
        cards:
          - type: "vertical-stack"
            view_layout:
              grid-area: living-room
            cards:
              - type: "custom:button-card"
                name: "Living Room"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["climate.living_room_thermostat"].attributes.current_temperature; ]]]'
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    service: browser_mod.popup
                    data:
                      content:
                        type: vertical-stack
                        cards:
                          - type: thermostat
                            entity: climate.living_room_thermostat
                            card_mod:
                              style:
                                .: |
                                  ha-card {
                                    box-shadow: none !important;
                                  }
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.living_room_standing_lamp
                    name: "Standing Lamp"
                    template:
                      - card
                  - type: "custom:button-card"
                    entity: light.living_room_led_bar
                    name: "LED Bar"
                    template:
                      - card
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.living_room_tv_lights
                    name: "TV Lights"
                    template:
                      - card
                  - type: "custom:button-card"
                    entity: light.living_room_ceiling_lamp
                    name: "Ceiling Lamp"
                    template:
                      - card
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.living_room_left_desk_lamp
                    name: "Left Desk Lamp"
                    template:
                      - card
                  - type: "custom:button-card"
                    entity: light.living_room_right_desk_lamp
                    name: "Right Desk Lamp"
                    template:
                      - card

          - type: "vertical-stack"
            view_layout:
              grid-area: bedroom
            cards:
              - type: "custom:button-card"
                name: "Bedroom"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["climate.bedroom_thermostat"].attributes.current_temperature; ]]]'
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    service: browser_mod.popup
                    data:
                      content:
                        type: vertical-stack
                        cards:
                          - type: thermostat
                            entity: climate.bedroom_thermostat
                            card_mod:
                              style:
                                .: |
                                  ha-card {
                                    box-shadow: none !important;
                                  }
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.bedroom_left_bedside_lamp
                    name: "Left Bedside Lamp"
                    template:
                      - card
                  - type: "custom:button-card"
                    entity: light.bedroom_right_bedside_lamp
                    name: "Right Bedside Lamp"
                    template:
                      - card
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.bedroom_ceiling_lamp
                    name: "Ceiling Lamp"
                    template:
                      - card

          - type: "vertical-stack"
            view_layout:
              grid-area: kids-room
            cards:
              - type: "custom:button-card"
                name: "Kids Room"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["climate.kids_room_thermostat"].attributes.current_temperature; ]]]'
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    service: browser_mod.popup
                    data:
                      content:
                        type: vertical-stack
                        cards:
                          - type: thermostat
                            entity: climate.kids_room_thermostat
                            card_mod:
                              style:
                                .: |
                                  ha-card {
                                    box-shadow: none !important;
                                  }
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: light.kids_room_desk_lamp
                    name: "Desk Lamp"
                    template:
                      - card
                  - type: "custom:button-card"
                    entity: light.kids_room_couch_lamp
                    name: "Couch Lamp"
                    template:
                      - card

          - type: "vertical-stack"
            view_layout:
              grid-area: kitchen
            cards:
              - type: "custom:button-card"
                name: "Kitchen"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["climate.kitchen_thermostat"].attributes.current_temperature; ]]]'
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    service: browser_mod.popup
                    data:
                      content:
                        type: vertical-stack
                        cards:
                          - type: thermostat
                            entity: climate.kitchen_thermostat
                            card_mod:
                              style:
                                .: |
                                  ha-card {
                                    box-shadow: none !important;
                                  }
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    name: "Counter Top Lights"
                    template:
                      - card
                    entity: light.kitchen_counter_top_lights
                  - type: "custom:button-card"
                    name: "Water Kettle"
                    entity: switch.kitchen_water_kettle
                    template:
                      - card
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    name: "Dishwasher Plug"
                    entity: switch.kitchen_dishwasher_plug
                    icon: mdi:power-plug
                    tap_action:
                      action: more-info
                    hold_action:
                      action: toggle
                    template:
                      - card
                  - type: "custom:button-card"
                    name: "Dishwasher"
                    entity: binary_sensor.kitchen_dishwasher
                    tap_action:
                      action: more-info
                    template:
                      - card

          - type: "vertical-stack"
            view_layout:
              grid-area: hallway
            cards:
              - type: "custom:button-card"
                name: "Hallway"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["sensor.hallway_temperature"].state; ]]]'
                  humidity: '[[[ return states["sensor.hallway_humidity"].state; ]]]'
                tap_action:
                  action: fire-dom-event
                  browser_mod:
                    service: browser_mod.popup
                    data:
                      content:
                        type: vertical-stack
                        cards:
                          - type: thermostat
                            entity: climate.bedroom_thermostat
                            card_mod:
                              style:
                                .: |
                                  ha-card {
                                    box-shadow: none !important;
                                  }
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: binary_sensor.hallway_front_door
                    name: "Front Door"
                    tap_action:
                      action: none
                    template:
                      - card_contact_sensor

          - type: "vertical-stack"
            view_layout:
              grid-area: bathroom
            cards:
              - type: "custom:button-card"
                name: "Bathroom"
                template:
                  - section_title
                variables:
                  temperature: '[[[ return states["sensor.bathroom_temperature"].state; ]]]'
                  humidity: '[[[ return states["sensor.bathroom_humidity"].state; ]]]'
              - type: "horizontal-stack"
                cards:
                  - type: "custom:button-card"
                    entity: switch.bathroom_smart_socket
                    name: "Washing Machine Plug"
                    variables:
                      power_outlet_consumption_sensor: sensor.bathroom_smart_socket_power
                    icon: mdi:power-plug
                    tap_action:
                      action: more-info
                    hold_action:
                      action: toggle
                    template:
                      - card
                  - type: "custom:button-card"
                    name: "Washing Machine"
                    entity: binary_sensor.bathroom_washing_machine
                    tap_action:
                      action: more-info
                    template:
                      - card

      - type: "custom:mod-card"
        style: |
          ha-card {
            border-radius: 0px;
            padding: 12px 8px;
            margin: 0px;
            height: auto;
          }
        view_layout:
          grid-area: otherActions
        card:
          type: "horizontal-stack"
          cards:
            - type: "custom:button-card"
              icon: mdi:home-assistant
              name: "Home Assistant"
              template:
                - popup_button
            - type: "custom:button-card"
              icon: mdi:tablet
              name: "Home Hub"
              variables:
                notification: >
                  [[[
                    let id = states['binary_sensor.home_hub_plugged_in'];
                    if (id) return id.state === 'off';
                  ]]]
              template:
                - popup_button
              tap_action:
                action: fire-dom-event
                browser_mod:
                  service: browser_mod.popup
                  data:
                    title: Home Hub
                    card_mod:
                      style:
                        #popup header
                        .:
                    content:
                      type: vertical-stack
                      cards:
                        - type: entities
                          state_color: true
                          card_mod:
                            class: content
                          style: |
                            ha-card {
                              box-shadow: none !important;
                            }
                          entities:
                            - entity: switch.home_hub_screen
                              secondary_info: last-changed
                              name: Screen

                            - type: custom:slider-entity-row
                              entity: number.home_hub_screen_brightness
                              name: Brightness
                              icon: mdi:brightness-6
                              hide_state: false
                              card_mod:
                                style:
                                  # full width slider
                                  hui-generic-entity-row$: |
                                    div {
                                      flex: auto !important;
                                    }

                            - entity: switch.home_hub_screensaver
                              name: Screensaver

                            - entity: binary_sensor.home_hub_plugged_in
                              name: Plugged In

                            - type: custom:bar-card
                              width: 55%
                              height: 2em
                              decimal: 0
                              unit_of_measurement: "%"
                              positions: &bar_card_positions
                                icon: outside
                                indicator: "off"
                                name: outside
                              severity:
                                - color: "#6d2525"
                                  from: 0
                                  to: 89
                                - color: "#303435"
                                  from: 90
                                  to: 999
                              entity_row: true
                              entities:
                                - entity: sensor.home_hub_battery
                                  icon: mdi:battery
                                  name: Battery
                                  tap_action:
                                    action: call-service
                                    service: homeassistant.update_entity
                                    service_data:
                                      entity_id: sensor.home_hub_battery_level

                            - type: custom:bar-card
                              width: 55%
                              height: 2em
                              decimal: 0
                              unit_of_measurement: "%"
                              positions: *bar_card_positions
                              severity:
                                - color: "#6d2525"
                                  from: 90
                                  to: 999
                              entity_row: true
                              entities:
                                - entity: sensor.home_hub_memory_percentage
                                  name: Memory - 2GB
                                  icon: mdi:memory
                                  tap_action:
                                    action: call-service
                                    service: homeassistant.update_entity
                                    service_data:
                                      entity_id: sensor.home_hub_memory_percentage

                                - entity: sensor.home_hub_storage_percentage
                                  name: Storage - 16GB
                                  icon: mdi:sd
                                  tap_action:
                                    action: call-service
                                    service: homeassistant.update_entity
                                    service_data:
                                      entity_id: sensor.home_hub_storage_percentage
            - type: "custom:button-card"
              icon: mdi:history
              name: "History"
              template:
                - popup_button
            - type: "custom:button-card"
              icon: mdi:server
              name: "Proxmox"
              template:
                - popup_button
            - type: "custom:button-card"
              icon: mdi:update
              name: "Updates"
              entity: sensor.template_updates
              variables:
                notification: >
                  [[[
                    return parseInt(entity?.state);
                  ]]]
              template:
                - popup_button
              tap_action:
                action: fire-dom-event
                browser_mod:
                  service: browser_mod.popup
                  data:
                    title: Updates
                    card_mod:
                      style:
                        .:
                    content:
                      type: custom:mod-card
                      card_mod:
                        style:
                          hui-grid-card:
                            $: |
                              button-card:nth-child(2) {
                                margin: 0.6em 0 2.1em 0.8em;
                              }
                              button-card:nth-child(4) {
                                margin: 0.6em 0 0.5em 0.8em;
                              }
                              #root {
                                grid-gap: 0 !important;
                                padding: var(--tablet-popup-content-padding);
                              }
                      card:
                        type: grid
                        columns: 1
                        square: false
                        cards:
                          - type: custom:button-card
                            entity: sensor.current_version
                            template:
                              - updates_hass
                            variables:
                              available: sensor.template_updates
                              latest: sensor.docker_hub
                              latest_beta: sensor.docker_hub_beta
                              release_notes: sensor.hass_release_notes
                              release_notes_beta: sensor.hass_release_notes_beta
            - type: "custom:button-card"
              icon: mdi:router-wireless-settings
              name: "Router"
              template:
                - popup_button

      - type: "vertical-stack"
        view_layout:
          grid-area: mediaPlayer
        cards:
          - type: conditional
            conditions:
              - entity: select.conditional_media
                state: Living Room Apple TV
            card:
              type: "custom:button-card"
              entity: media_player.living_room_apple_tv
              variables:
                media_icon: sensor.active_media_players
                media_source: sensor.active_media_players
                entity_picture: sensor.active_media_players
              template:
                - conditional_media
          - type: conditional
            conditions:
              - entity: select.conditional_media
                state: Living Room HomePod mini
            card:
              type: "custom:button-card"
              entity: media_player.living_room_homepod_mini
              variables:
                media_icon: sensor.active_media_players
                media_source: sensor.active_media_players
                entity_picture: sensor.active_media_players
              template:
                - conditional_media
          - type: conditional
            conditions:
              - entity: select.conditional_media
                state: Kitchen HomePod mini
            card:
              type: "custom:button-card"
              entity: media_player.kitchen_homepod_mini
              variables:
                media_icon: sensor.active_media_players
                media_source: sensor.active_media_players
                entity_picture: sensor.active_media_players
              template:
                - conditional_media

      - type: "horizontal-stack"
        view_layout:
          grid-area: footer
        cards:
          - type: "custom:button-card"
            entity: sensor.template_footer
            template: footer
