##########
# This Blueprint is created by Smart Home Junkie
# (c) copyright 2023 by Smart Home Junkie. You may not copy, reproduce, distribute, transmit, modify, create derivative works,
# or in any other way exploit any part of copyrighted material without the prior written permission from Smart Home Junkie
##########

blueprint:
  name: Awtrix Rain Forecast
  description: Show Rain Forecast Graph on the Ulanzi Clock
  domain: automation
  author: Smart Home Junkie
  input:
    awtrix_displays:
      name: Awtrix Displays
      description: Select the target Awtrix displays.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    toggle_helper:
      name: Toggle Helper
      description: Select the Toggle Helper that will toggle the App on or off.
      selector:
        entity:
          domain: input_boolean
    my_sensor:
      name: Sensor
      description: Select your Weather Sensor.
      selector:
        entity:
          domain: weather
    graph_type:
      name: Graph Type
      description: Select bar chart or line chart
      selector:
        select:
          options:
            - label: "Bar Chart"
              value: "bar"
            - label: "Line Chart"
              value: "line"
          mode: dropdown
      default: "bar"
    graph_color:
      name: Graph Color
      description: Select the Graph color
      selector:
        color_rgb:
      default: [255, 255, 255]
    background_color:
      name: Background Color
      description: Select the Background color
      selector:
        color_rgb:
      default: [0, 0, 0]
    autoscale:
      name: Autoscale
      description: Enables or disables autoscaling for bar and linechart
      selector:
        boolean:
      default: true
    my_text:
      name: Custom Text
      description: Text to show when no rain is expected
      selector:
        text:
      default: "No rain expected"
    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as you entered it"
              value: "2"
          mode: dropdown
      default: "0"
    show_rainbow:
      name: Rainbow Colors
      description: Should the notification be shown in Rainbow colors?
      selector:
        boolean:
      default: false
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed. 0 is global app time.
      default: "0"
    lifetime:
      name: Lifetime (in seconds)
      description: Sets how long the app should stay alive before it gets removed from the app cycle automatically. 0 is infinite lifetime.
      default: "0"
    switch_to_app:
      name: Switch to app on value change
      description: Should the clock switch to the app immediately when the value of the sensor changes?
      selector:
        boolean:
      default: false

mode: queued

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"
  - platform: state
    entity_id: !input my_sensor
    id: Changes
    for:
      hours: 0
      minutes: 0
      seconds: 2

variables:
  device_ids: !input awtrix_displays
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}

    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable|unknown') | list }}
  my_sensor: !input my_sensor
  graph_type: !input graph_type
  autoscale: !input autoscale
  text_case: !input text_case
  show_rainbow: !input show_rainbow
  graph_color: !input graph_color
  background_color: !input background_color
  my_toggle_helper: toggle_helper
  my_duration: !input duration
  my_text: !input my_text
  my_lifetime: !input lifetime
  switch_to_app: !input switch_to_app
  app_name: "rain_forecast"
  weather_mapper:
    rainy: 72
    cloudy: 26488
    fog: 12196
    hail: 2441
    snowy: 4702
    sunny: 2282
    windy: 3363
    lightning: 630
    pouring: 49300
    partlycloudy: 13852
    clear-night: 12181

action:
  - variables:
      weather_entity: !input my_sensor
      forecast: "{{ state_attr(weather_entity, 'forecast') }}"
  - service: weather.get_forecasts
    data:
      type: hourly
    response_variable: my_forecast
    target:
      entity_id: !input my_sensor
    continue_on_error: true
  - variables:
      my_graph_data: >
        {% set f = forecast if forecast is not none else my_forecast[my_sensor].forecast %}
        {{ f[:11] | map(attribute='precipitation') | map('multiply', 100) | map('round', 0) | map('int') | list }}
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "{{ graph_type }}": {{ my_graph_data }},
                        "autoscale": {{ iif(autoscale, "true", "false") }},
                        "text": "{{ iif(my_graph_data | sum > 0,'',my_text) }}",
                        "background": {{ background_color }},
                        "color": {{graph_color}},
                        "icon": "{{ states(my_sensor) }}",
                        "textCase": {{ text_case }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }}
                      }
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
      - conditions:
          - condition: trigger
            id: "Off"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Changes
              - condition: state
                entity_id: !input toggle_helper
                state: "on"
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input my_sensor
                    state:
                      - unavailable
                      - unknown
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "{{ graph_type }}": {{ my_graph_data }},
                        "autoscale": {{ iif(autoscale, "true", "false") }},
                        "text": "{{ iif(my_graph_data | sum > 0,'',my_text) }}",
                        "background": {{ background_color }},
                        "color": {{graph_color}},
                        "icon": "{{ states(my_sensor) }}",
                        "textCase": {{ text_case }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }}
                      }
                - condition: template
                  value_template: "{{ switch_to_app == true }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
