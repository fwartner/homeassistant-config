blueprint:
  name: Conversation agent Agenda Notification
  description: Conversation agent generates a notification based on the upcoming calendar
    agenda, location, and weather information.
  domain: automation
  input:
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 07:00:00
    notify_service:
      name: Notify service name
      description: The name of the notify service where the notification should be
        sent.
      selector:
        text:
          multiple: false
          multiline: false
      default: notify.notify
    notify_target:
      name: Notify target
      description: The target of the notify service.
      selector:
        text:
          multiple: false
          multiline: false
      default:
    calendar_entity:
      name: Calendar
      description: The calendar entity to use for finding upcoming calendar events.
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - calendar
    calendar_duration:
      name: Calendar Event duration
      description: How many hours ahead to look for upcoming calendar events.
      selector:
        duration: {}
      default:
        hours: 18
    weather_entity:
      name: Weather Entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - weather
    zone_entity:
      name: Home Zone Entity
      description: The zone entity to use to determine approximate location for understanding
        typical weather.
      selector:
        entity:
          multiple: false
          filter:
          - domain:
            - zone
    conversation_agent:
      name: Conversation Agent
      selector:
        conversation_agent: {}
    prompt:
      name: Conversation Agent Prompt
      selector:
        text:
          multiline: true
          type: text
          multiple: false
      default: "Please generate text for a notification that will be sent to the users\nsmartphone
        with helpful information.\n\nYou are a helpful personal agent that generates
        text for the user:\n- Your answers are helpful, friendly, warm, insightful.\n-
        Your answers are not technical, and do not include Home Assistant internal
        details such as entities in responses.\n- Your messages help the user prepare
        for their day, for example:\n  - Making note of unusual weather for the location
        and time of year (but not mundane details like \"0% chance of precipitation\")\n
        \ - How much time remaining until their first meeting\n  - Anything that may
        be special or unique, such as celebrating a birthday"
  source_url: https://gist.github.com/allenporter/e70d9eb090c7dbdd593cf526e07b4abe
trigger:
  platform: time
  at: !input notify_time
action:
- variables:
    weather_entity: !input weather_entity
    calendar_entity: !input calendar_entity
    zone_entity: !input zone_entity
    calendar_duration: !input calendar_duration
    prompt: !input prompt
- alias: Fetch Weather Forecast
  service: weather.get_forecasts
  data:
    type: hourly
  target:
    entity_id:
    - '{{ weather_entity }}'
  response_variable: daily_forecast
- variables:
    forecast_entity: '{{ daily_forecast[weather_entity] }}'
    forecast: '{{ forecast_entity.forecast[0] }}'
- alias: Fetch Calendar Agenda
  service: calendar.get_events
  data:
    duration: !input calendar_duration
  target:
    entity_id: !input calendar_entity
  response_variable: events_response
- alias: Conversation Agent Notification Text
  service: conversation.process
  data:
    text: "Time: {{ now().strftime(\"%A %B %d %H:%M %p\") }}\n{%- if weather_entity
      is defined %}\n{%- set temperature_unit = state_attr(weather_entity, 'temperature_unit')
      -%}\nForecast: {{ forecast.condition }} ({{ forecast.temperature }}{{ temperature_unit
      }}, {{ forecast.precipitation }}% precipitation)\n{%- endif %}\n\nCalendar \"{{
      state_attr(calendar_entity, 'friendly_name') }}\" events for the next {{ calendar_duration.hours
      }}:\n{%- set agenda = (events_response | items | first)[1] %}\n{%- if agenda.events
      %}\n  {%- for event in agenda.events %}\n  - Summary: {{ event.summary }}\n
      \   Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end
      }}{% else %}All Day{% endif %}\n    {%- if event.description is defined %}\n
      \   Description: {{ event.description }}\n    {% endif -%}\n    {%- if event.location
      is defined %}\n      Location: {{ event.location }}\n    {% endif -%}\n  {%-
      endfor %}\n{%- else %}\n  - No upcoming events.\n{%- endif %}\n\n{{ prompt }}"
    agent_id: !input conversation_agent
  response_variable: agent
- alias: Send notification
  service: !input notify_service
  data:
    target: !input notify_target
    title: '{{ now().strftime(''%A'') }} Agenda'
    message: '{{ agent.response.speech.plain.speech }}'
