##########
# This Blueprint is created by Smart Home Junkie
# (c) copyright 2023 by Smart Home Junkie. You may not copy, reproduce, distribute, transmit, modify, create derivative works,
# or in any other way exploit any part of copyrighted material without the prior written permission from Smart Home Junkie
##########

blueprint:
  name: Awtrix Create Sensor App
  description: Show a Home Assistant Sensor on the Ulanzi Clock
  domain: automation
  author: Smart Home Junkie
  input:
    awtrix_displays:
      name: Awtrix Displays
      description: Select the target Awtrix displays.
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    toggle_helper:
      name: Toggle Helper
      description: Select the Toggle Helper that will toggle the App on or off.
      selector:
        entity:
          domain: input_boolean
    my_sensor:
      name: Sensor
      description: Select the Sensor or Media Player for which you want to show the state on the Ulanzi clock. The app value will change when the value of this sensor changes.
      selector:
        entity:
          domain:
            - sensor
            - media_player
            - input_text
    my_template_sensor:
      name: Template (Optional)
      description: Enter a template to format your sensor the way you like it. (Advanced mode)
      selector:
        text:
      default: ""
    my_icon:
      name: Icon
      description: Enter the Icon Name or ID of the icon that you like to show.
      selector:
        text:
      default: ""
    push_icon:
      name: Push Icon
      description: Icon behavior
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text and will not appear again"
              value: "1"
            - label: "Icon moves with text but appears again when the text starts"
              value: "2"
          mode: dropdown
      default: "2"
    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as you entered it"
              value: "2"
          mode: dropdown
      default: "0"
    background_color:
      name: Background Color
      description: Select the Background color
      selector:
        color_rgb:
      default: [0, 0, 0]
    text_color:
      name: Text Color
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    use_threshold:
      name: Use Threshold value?
      description: If set to true, the color of your text will adapt based on whether the value of your sensor is below or above the threshold value.
      selector:
        boolean:
      default: false
    threshold_value:
      name: Threshold Value
      description: Enter a value that can be used as a threshold to switch colors
      default: "0"
    low_value_text_color:
      name: Low-value Text color
      description: Select the color when the value of the sensor is lower than the threshold value
      selector:
        color_rgb:
      default: [255, 255, 255]
    high_value_text_color:
      name: High-value Text color
      description: Select the color when the value of the sensor is equal to or higher than the threshold value
      selector:
        color_rgb:
      default: [255, 255, 255]
    show_rainbow:
      name: Rainbow Colors
      description: Should the notification be shown in Rainbow colors? This overwrites all other text color settings.
      selector:
        boolean:
      default: false
    repeat:
      name: Repeat
      description: Sets how many times the text should be scrolled through the matrix before the app ends. If the value is -1, the duration will be taken into account instead.
      default: "-1"
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed. 0 is global app time.
      default: "0"
    lifetime:
      name: Lifetime (in seconds)
      description: Sets how long the app should stay alive before it gets removed from the app cycle automatically. 0 is infinite lifetime.
      default: "0"
    switch_to_app:
      name: Switch to app on value change
      description: Should the clock switch to the app immediately when the value of the sensor changes? BEWARE! Setting this to On for a sensor that changes very frequently might flood your clock with MQTT messages and might cause reboots of the clock!
      selector:
        boolean:
      default: false
    scroll:
      name: Scroll the notification?
      description: Enables text scrolling
      selector:
        boolean:
      default: true
    scrollspeed:
      name: Scroll Speed Percentage
      description: Modifies the scrollspeed. You need to enter a percentage value.
      selector:
        number:
          mode: slider
          min: 0
          max: 100
      default: 100
    effect:
      name: Effect
      description: Select a background effect (optional).
      selector:
        select:
          options:
            - label: "None"
              value: ""
            - label: "BrickBreaker"
              value: "BrickBreaker"
            - label: "Checkerboard"
              value: "Checkerboard"
            - label: "ColorWaves"
              value: "ColorWaves"
            - label: "Fireworks"
              value: "Fireworks"
            - label: "LookingEyes"
              value: "LookingEyes"
            - label: "Matrix"
              value: "Matrix"
            - label: "MovingLine"
              value: "MovingLine"
            - label: "PingPong"
              value: "PingPong"
            - label: "Pacifica"
              value: "Pacifica"
            - label: "Plasma"
              value: "Plasma"
            - label: "PlasmaCloud"
              value: "PlasmaCloud"
            - label: "Radar"
              value: "Radar"
            - label: "Ripple"
              value: "Ripple"
            - label: "Snake"
              value: "Snake"
            - label: "SwirlIn"
              value: "SwirlIn"
            - label: "SwirlOut"
              value: "SwirlOut"
            - label: "TheaterChase"
              value: "TheaterChase"
            - label: "TwinklingStars"
              value: "TwinklingStars"
      default: ""

mode: queued

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"
  - platform: state
    entity_id: !input my_sensor
    id: Changes

variables:
  device_ids: !input awtrix_displays
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}

    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable|unknown') | list }}
  my_icon: !input my_icon
  push_icon: !input push_icon
  my_sensor: !input my_sensor
  my_template_sensor: !input my_template_sensor
  background_color: !input background_color
  base_text_color: !input text_color
  text_case: !input text_case
  show_rainbow: !input show_rainbow
  my_toggle_helper: toggle_helper
  app_name: >
    {{ my_sensor | trim }}
  my_repeat: !input repeat
  my_duration: !input duration
  my_lifetime: !input lifetime
  switch_to_app: !input switch_to_app
  my_text: >
    {{ iif(my_template_sensor == "", states(my_sensor,rounded= True,with_unit=True), my_template_sensor)}}
  scrolling: !input scroll
  scroll_speed: !input scrollspeed
  effect: !input effect
  use_threshold: !input use_threshold
  threshold_value: !input threshold_value
  low_value_text_color: !input low_value_text_color
  high_value_text_color: !input high_value_text_color
  my_value: >
    {{ iif(my_template_sensor == "", states(my_sensor), my_template_sensor | string | select('in','.-0123456789') | join ) }}
  text_color: >-
    {% if use_threshold == true %}
      {% if my_value | float(0) < threshold_value | float(0) %}
        {{ low_value_text_color }}
      {% else %}
        {{ high_value_text_color }}
      {% endif %}
    {% else %}
      {{ base_text_color }}
    {% endif %}

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "text": "{{ my_text }}",
                        "background": {{ background_color }},
                        "color": {{text_color}},
                        "icon": "{{my_icon}}",
                        "textCase": {{ text_case }},
                        "pushIcon": {{ push_icon }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "repeat": {{ my_repeat }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }},
                        "noScroll": {{ iif(scrolling, "false", "true") }},
                        "scrollSpeed": {{ scroll_speed }},
                        "effect": "{{ effect }}"
                      }
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
      - conditions:
          - condition: trigger
            id: "Off"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Changes
              - condition: state
                entity_id: !input toggle_helper
                state: "on"
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input my_sensor
                    state:
                      - "off"
                      - idle
                      - unavailable
                      - unknown
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "text": "{{ my_text }}",
                        "background": {{ background_color }},
                        "color": {{text_color}},
                        "icon": "{{my_icon}}",
                        "textCase": {{ text_case }},
                        "pushIcon": {{ push_icon }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "repeat": {{ my_repeat }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }},
                        "noScroll": {{ iif(scrolling, "false", "true") }},
                        "scrollSpeed": {{ scroll_speed }},
                        "effect": "{{ effect }}"
                      }
                - condition: template
                  value_template: "{{ switch_to_app == true }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
