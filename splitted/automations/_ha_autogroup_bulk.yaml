action:
- if:
  - condition: template
    value_template: '{{ trigger.id == ''startup'' }}'
  then:
  - delay: 240
- data_template:
    entities: "{%-\n  for state in states.sensor\n    if is_state_attr(state.entity_id,\
      \ 'device_class', 'battery') and\n    (state.entity_id.endswith(\"_battery\"\
      ) or state.entity_id.endswith(\"_power\"))\n%} {{ state.entity_id }}{%- if not\
      \ loop.last -%}, {%- endif -%} {%- endfor %}"
    icon: mdi:battery
    name: '[Group] Battery Devices'
    object_id: battery_devices
  service: group.set
- data_template:
    entities: '{{ states.media_player|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:media-network
    name: '[Group] Media Players'
    object_id: media_players
  service: group.set
- data:
    entities: "{{ states.light\n    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:lamps
    name: '[Group] Lights'
    object_id: lights
  service: group.set
- data_template:
    entities: '{{ states.automation|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:home-automation
    name: '[Group] Automations'
    object_id: automations
  service: group.set
- data_template:
    entities: '{{ states.remote|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:remote
    name: '[Group] Remotes'
    object_id: remotes
  service: group.set
- data_template:
    entities: '{{ states.script|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:script
    name: '[Group] Scripts'
    object_id: scripts
  service: group.set
- data_template:
    entities: '{{ states.switch|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:script
    name: '[Group] Switches'
    object_id: switches
  service: group.set
- data_template:
    entities: '{{ states.calendar|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:calendar
    name: '[Group] Calendars'
    object_id: calendars
  service: group.set
- data_template:
    entities: "{{ states.calendar\n  |selectattr('entity_id','search','calendar.ical_*')\n\
      \  |rejectattr('entity_id','search','home_assistant*')\n  |map(attribute='entity_id')|list|sort\
      \ }}"
    icon: mdi:calendar
    name: '[Group] Calendars (Sport)'
    object_id: calendars_sport
  service: group.set
- data_template:
    entities: '{{ states.geo_location|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:map-marker-alert
    name: '[Group] Geo Locations'
    object_id: geo_location
  service: group.set
- data_template:
    entities: '{{ states.weather|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:weather-cloudy-clock
    name: '[Group] Weather'
    object_id: weather
  service: group.set
- data_template:
    entities: '{{ states.person|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:account-group
    name: '[Group] People'
    object_id: people
  service: group.set
- data_template:
    entities: '{{ states.camera|map(attribute=''entity_id'')|list|sort }}'
    icon: mdi:cctv
    name: '[Group] Cameras'
    object_id: cameras
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','input_boolean.alerts_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:alert-decagram
    name: '[Group] Alert Controls'
    object_id: alert_controls
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','binary_sensor.alerts_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:alert-decagram
    name: '[Group] Alert Monitors'
    object_id: alert_monitors
  service: group.set
- data:
    entities: "{{ states.alert\n    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:alert-decagram
    name: '[Group] Alerts'
    object_id: alerts
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','binary_sensor.connected_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:connection
    name: '[Group] Connectivity Monitors'
    object_id: connectivity_monitors
  service: group.set
- data:
    entities: '{{ states.person|map(attribute=''entity_id'')|list|sort }}

      '
    icon: mdi:account-multiple
    name: '[Group] People'
    object_id: people
  service: group.set
- data:
    entities: "{{ states\n  |selectattr('entity_id','search','waqi*')\n  |rejectattr('entity_id','search','alert*')\n\
      \  |rejectattr('entity_id','search','group*')\n  |map(attribute='entity_id')|list|sort\
      \ }}\n"
    icon: mdi:smog
    name: '[Group] WAQI'
    object_id: waqi
  service: group.set
- data:
    entities: "{{states.sensor\n      |selectattr('entity_id','search','sensor.pi4srv_monitordocker_')\n\
      \      |rejectattr('entity_id','search','_1cpu')\n      |rejectattr('entity_id','search','_containers_')\n\
      \      |rejectattr('entity_id','search','_cpu')\n      |rejectattr('entity_id','search','_images')\n\
      \      |rejectattr('entity_id','search','_memory')\n      |rejectattr('entity_id','search','_version')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker Pi4Srv Containers'
    object_id: docker_pi4srv_containers
  service: group.set
- data:
    entities: "{{states.switch\n      |selectattr('entity_id','search','pi4srv_monitordocker_')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker Pi4Srv Switches'
    object_id: docker_pi4srv_switches
  service: group.set
- data:
    entities: "{{states.sensor\n      |selectattr('entity_id','search','sensor.tbsh1_monitordocker_')\n\
      \      |rejectattr('entity_id','search','_1cpu')\n      |rejectattr('entity_id','search','_containers_')\n\
      \      |rejectattr('entity_id','search','_cpu')\n      |rejectattr('entity_id','search','_images')\n\
      \      |rejectattr('entity_id','search','_memory')\n      |rejectattr('entity_id','search','_version')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh1 Containers'
    object_id: docker_tbsh1_containers
  service: group.set
- data:
    entities: "{{states.switch\n      |selectattr('entity_id','search','tbsh1_monitordocker_')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh1 Switches'
    object_id: docker_tbsh1_switches
  service: group.set
- data:
    entities: "{{states.sensor\n      |selectattr('entity_id','search','sensor.tbsh2_monitordocker_')\n\
      \      |rejectattr('entity_id','search','_1cpu')\n      |rejectattr('entity_id','search','_containers_')\n\
      \      |rejectattr('entity_id','search','_cpu')\n      |rejectattr('entity_id','search','_images')\n\
      \      |rejectattr('entity_id','search','_memory')\n      |rejectattr('entity_id','search','_version')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh2 Containers'
    object_id: docker_tbsh2_containers
  service: group.set
- data:
    entities: "{{states.switch\n      |selectattr('entity_id','search','tbsh2_monitordocker_')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh2 Switches'
    object_id: docker_tbsh2_switches
  service: group.set
- data:
    entities: "{{states.sensor\n      |selectattr('entity_id','search','sensor.tbsh3_monitordocker_')\n\
      \      |rejectattr('entity_id','search','_1cpu')\n      |rejectattr('entity_id','search','_containers_')\n\
      \      |rejectattr('entity_id','search','_cpu')\n      |rejectattr('entity_id','search','_images')\n\
      \      |rejectattr('entity_id','search','_memory')\n      |rejectattr('entity_id','search','_version')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh3 Containers'
    object_id: docker_tbsh3_containers
  service: group.set
- data:
    entities: "{{states.switch\n      |selectattr('entity_id','search','tbsh3_monitordocker_')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh3 Switches'
    object_id: docker_tbsh3_switches
  service: group.set
- data:
    entities: "{{states.sensor\n      |selectattr('entity_id','search','sensor.tbsh5_monitordocker_')\n\
      \      |rejectattr('entity_id','search','_1cpu')\n      |rejectattr('entity_id','search','_containers_')\n\
      \      |rejectattr('entity_id','search','_cpu')\n      |rejectattr('entity_id','search','_images')\n\
      \      |rejectattr('entity_id','search','_memory')\n      |rejectattr('entity_id','search','_version')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh5 Containers'
    object_id: docker_tbsh5_containers
  service: group.set
- data:
    entities: "{{states.switch\n      |selectattr('entity_id','search','tbsh5_monitordocker_')\n\
      \      |map(attribute='entity_id')\n      |list|sort }}\n"
    icon: mdi:docker
    name: '[Group] Docker tbsh5 Switches'
    object_id: docker_tbsh5_switches
  service: group.set
- data:
    entities: "{{expand(integration_entities('Supervisor'))\n  |selectattr('domain',\
      \ 'eq', 'update')\n  |map(attribute='entity_id')\n  |list|sort }}\n"
    icon: mdi:home-assistant
    name: '[Updates] Home Assistant'
    object_id: updates_homeassistant
  service: group.set
- data:
    entities: "{{expand(integration_entities('hacs'))\n  |selectattr('domain', 'eq',\
      \ 'update')\n  |map(attribute='entity_id')\n  |list|sort }}\n"
    icon: mdi:home-assistant
    name: '[Updates] HA Community Store'
    object_id: updates_hacs
  service: group.set
- data:
    entities: "{{states.update\n  |selectattr('entity_id', 'search', 'wud')\n  |map(attribute='entity_id')\n\
      \  |list|sort }}\n"
    icon: mdi:docker
    name: '[Updates] Docker'
    object_id: updates_docker
  service: group.set
- data:
    entities: "{{expand(integration_entities('unifi'))\n  |selectattr('domain', 'eq',\
      \ 'update')\n  |map(attribute='entity_id')\n  |list|sort }}\n"
    icon: si:ubiquiti
    name: '[Updates] Unifi'
    object_id: updates_unifi
  service: group.set
- data:
    entities: "{{states.update\n  |selectattr('entity_id', 'search', 'z2m')\n  |map(attribute='entity_id')\n\
      \  |list|sort }}\n"
    icon: mdi:zigbee
    name: '[Updates] Zigbee2MQTT'
    object_id: updates_zigbee2mqtt
  service: group.set
- data:
    entities: "{{states.update\n  |rejectattr('entity_id', 'search', 'wud')\n  |rejectattr('entity_id',\
      \ 'search', 'z2m')\n  |rejectattr('entity_id', 'in', expand(integration_entities('hacs'))|map(attribute='entity_id')|list)\n\
      \  |rejectattr('entity_id', 'in', expand(integration_entities('Supervisor'))|map(attribute='entity_id')|list)\n\
      \  |rejectattr('entity_id', 'in', expand(integration_entities('unifi'))|map(attribute='entity_id')|list)\n\
      \  |map(attribute='entity_id')\n  |list|sort }}\n"
    icon: mdi:update
    name: '[Updates] Other'
    object_id: updates_other
  service: group.set
- data:
    entities: "{{ states\n  |selectattr('entity_id','search','qbittorrent_')\n  |map(attribute='entity_id')\n\
      \  |list|sort }}\n"
    icon: mdi:download-box
    name: '[Group] qbittorrent'
    object_id: qbittorrent
  service: group.set
- data:
    entities: "{{ states\n  |selectattr('entity_id','search','rssfeed_')\n  |map(attribute='entity_id')\n\
      \  |list|sort }}\n"
    icon: mdi:rss-box
    name: '[Group] RSS Feeds'
    object_id: rssfeeds
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','switch.addon_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:toggle-switch
    name: '[Group] Add-on Switches'
    object_id: addon_switch
  service: group.set
- data:
    entities: "{{ states|selectattr('entity_id','search','sensor.upcoming_sport_')\n\
      \        |rejectattr('entity_id','search','this_week')\n        |rejectattr('entity_id','search','next_24_hours')\n\
      \        |rejectattr('attributes.remaining_events','eq',0)\n        |map(attribute='entity_id')|list|sort\
      \ }}\n"
    icon: mdi:soccer
    name: '[Group] Upcoming Sport, With Events'
    object_id: upcomingsport_withevents
  service: group.set
- data:
    entities: "{{ states|selectattr('entity_id','search','sensor.upcoming_sport_')\n\
      \        |rejectattr('entity_id','search','this_week')\n        |rejectattr('entity_id','search','next_24_hours')\n\
      \        |selectattr('attributes.remaining_events','eq',0)\n        |map(attribute='entity_id')|list|sort\
      \ }}\n"
    icon: mdi:soccer
    name: '[Group] Upcoming Sport, Without Events'
    object_id: upcomingsport_withoutevents
  service: group.set
- data:
    entities: "{{ states|selectattr('entity_id','search','sensor.upcoming_sport_')\n\
      \        |rejectattr('entity_id','search','this_week')\n        |rejectattr('entity_id','search','next_24_hours')\n\
      \        |rejectattr('attributes.remaining_events','==',0)\n        |selectattr('attributes.nextevent_timeto','<=',7)\n\
      \        |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:soccer
    name: '[Group] Upcoming Sport, This Week'
    object_id: upcomingsport_thisweek
  service: group.set
- data:
    entities: "{{ states|selectattr('entity_id','search','sensor.getdata_livetrafficnsw_')\n\
      \        |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:dump-truck
    name: '[Group] Live Traffic NSW'
    object_id: livetrafficnsw
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','automation.sonos_playlist_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: si:sonos
    name: '[Group] Automations, Sonos Playlists'
    object_id: automations_sonos_playlists
  service: group.set
- data:
    entities: "{{ states\n    |selectattr('entity_id','search','sensor.breaches_*')\n\
      \    |map(attribute='entity_id')|list|sort }}\n"
    icon: mdi:virus-outline
    name: '[Group] Have I Been Pwned (HIBP) Breach Data'
    object_id: hibp_breaches
  service: group.set
alias: '[HA] Autogroup - Bulk'
description: ''
id: ha_autogroup_bulk
max_exceeded: silent
mode: single
trigger:
- event: start
  id: startup
  platform: homeassistant
- entity_id: input_boolean.ha_startup_pending
  platform: state
  to: 'off'
- event_data:
    domain: group
    service: reload
  event_type: call_service
  platform: event
- minutes: /15
  platform: time_pattern
